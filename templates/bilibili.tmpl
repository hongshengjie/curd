
package model

import (
    "context"
	"go-common/library/database/sql"
	{{if .ImportTime}}"time"{{end}}
)
{{ $table := .}}

// {{.GoTableName}} represents a row from '{{.TableName}}'.
type {{.GoTableName}} struct {
	{{- range .Fields }}
    	{{ .GoColumnName }} {{  .GoColumnType }} `json:"{{ .ColumnName }}"` // {{ .ColumnComment }}
    {{- end }}
}

// Insert  Insert a record
func (a *{{.GoTableName}}) Insert(ctx context.Context, db *sql.DB) error {
	var err error

	const sqlstr = `INSERT INTO  {{ .TableName}} (` +
		` {{ sqltool . true "field"}}` +
		`) VALUES (` +
		` {{ sqltool . true "?"}}` +
		`)`

	result, err := db.Exec(ctx, sqlstr, {{ sqltool . true "gofield"}})
	if err != nil {
		return err
	}
    {{if .PrimaryKey.IsAutoIncrment}}
    id, err := result.LastInsertId()
	if err != nil {
		return err
	}
    a.{{.PrimaryKey.GoColumnName}} = {{.PrimaryKey.GoColumnType}}(id)
    {{end}}
	return nil
}

// {{.GoTableName}}Delete Delete by primary key:`{{.PrimaryKey.ColumnName}}`
func {{.GoTableName}}Delete(ctx context.Context, db *sql.DB, {{.PrimaryKey.ColumnName}} {{.PrimaryKey.GoColumnType}})error{
	var err error

    const sqlstr = `DELETE FROM  {{.TableName}} WHERE {{.PrimaryKey.ColumnName}} = ?`

    _, err = db.Exec(ctx, sqlstr,{{.PrimaryKey.ColumnName}})
    if err != nil {
    	return err
    }
    return nil
}


// {{.GoTableName}}By{{.PrimaryKey.GoColumnName}}   Select a record by primary key:`{{.PrimaryKey.ColumnName}}`
func {{.GoTableName}}By{{.PrimaryKey.GoColumnName}}(ctx context.Context, db *sql.DB, {{.PrimaryKey.ColumnName}} {{.PrimaryKey.GoColumnType}})(*{{.GoTableName}},error){
	var err error

	const sqlstr = `SELECT ` +
		`{{ sqltool . false "field"}} ` +
		`FROM  {{.TableName}} ` +
		`WHERE {{.PrimaryKey.ColumnName}} = ?`

	a := {{.GoTableName}}{}

	err = db.QueryRow(ctx, sqlstr, {{.PrimaryKey.ColumnName}}).Scan({{ sqltool . false "gofield"}})
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// Update Update a record
func  (a *{{.GoTableName}})Update(ctx context.Context, db *sql.DB) error {
	var err error

	const sqlstr = `UPDATE {{.TableName}} SET ` +
		` {{sqltool . true "set"}}` +
		` WHERE {{.PrimaryKey.ColumnName}} = ?`

	_, err = db.Exec(ctx, sqlstr,{{sqlupdate . true }})
	return err
}


{{range $i ,$index := .Indexes}}

// {{$table.GoTableName}}By{{$index.GoIndexName}} Select by index name:`{{$index.IndexName}}`
func {{$table.GoTableName}}By{{$index.GoIndexName}}(ctx context.Context, db *sql.DB,{{ goparamlist $index true  }} )({{ if not $index.IsUnique }}[]{{ end }}*{{ $table.GoTableName }}, error){
{{ if $index.IsUnique }}

    const sqlstr = `SELECT ` +
        `{{sqltool $table false "field"}} ` +
        `FROM  {{$table.TableName}} ` +
        `WHERE {{query $index }}`

        a := {{$table.GoTableName}}{}

        err := db.QueryRow(ctx, sqlstr, {{goparamlist $index false}}).Scan({{sqltool $table false "gofield"}})
        if err != nil {
            return nil, err
        }

        return &a, nil
}

{{ else }}
        const sqlstr = `SELECT ` +
            `{{sqltool $table false "field"}} ` +
            `FROM  {{$table.TableName}} ` +
            `WHERE {{query $index }}`
        q, err := db.Query(ctx, sqlstr, {{ goparamlist $index false }})
        if err != nil {
            return nil, err
        }
        defer q.Close()

        res := []*{{ $table.GoTableName}}{}
        for q.Next() {
            a := {{ $table.GoTableName }}{}

            err = q.Scan({{sqltool $table false "gofield"}})
            if err != nil {
                return nil, err
            }
            res = append(res, &a)
        }
        if q.Err() != nil {
                return nil, err
        }

        return res, nil
}
{{end}}

{{end}}

