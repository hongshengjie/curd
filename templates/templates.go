// Code generated by go-bindata.
// sources:
// templates/table_bilibili.tmpl
// templates/table_std.tmpl
// templates/table_std_context.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTable_bilibiliTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x51\x6f\xdb\x36\x10\x7e\x16\x7f\xc5\xcd\x08\x5a\x29\x53\x95\xf7\x00\x46\x91\x26\x6a\x66\x2c\x4b\xbb\xd8\xd9\x1e\x8a\x62\xa6\xa5\x73\xa0\x55\x22\x6d\x92\x5e\x63\x10\xfc\xef\x03\x45\xd1\x96\x65\xd9\x71\xd0\xcd\x2f\xb2\xa8\xe3\xf1\xee\xbb\xef\x3b\x1e\x59\xd0\xec\x1b\x7d\x42\xa8\x78\x8e\x25\x21\x45\xb5\xe0\x42\x41\x48\x00\x00\x06\x19\x67\x0a\x9f\xd5\x80\x04\x83\x27\xfe\x2e\xe3\x55\xc5\xd9\x45\x59\xcc\x04\x15\xeb\x8b\x9c\x2a\x3a\xa3\x12\x2f\xe4\xb2\xb4\x16\xaa\xa8\x70\x40\x22\xa2\x35\x9c\x29\x3a\x2b\x11\x2e\x87\x90\x18\x43\xc8\xc5\x05\x68\x9d\xdc\xf2\x89\x5d\xbd\xa7\x15\x1a\x03\x02\x17\x02\x25\x32\x25\x81\x82\xe0\xdf\x61\x2e\x78\x05\x6f\xb5\x4e\x5a\x56\x6f\x13\xa2\xd6\x0b\xdc\xdf\x2d\x95\x58\x65\x0a\x34\x09\xb4\x7e\x07\x82\xb2\x27\x84\xe4\x63\x81\x65\x2e\xc1\x98\x3a\xf8\x40\x6b\x48\x6e\xf9\x35\x2f\x57\x15\xb3\xdb\xc0\x18\xd0\x1a\xb6\x8b\x13\xeb\xda\x18\x98\xfe\x2d\x39\xbb\x1c\x58\xfb\x1d\xeb\xc1\x14\xea\xc8\xfd\xf2\x35\xaf\x2a\x64\xca\x1f\x60\x4f\x46\x96\xdb\x57\x97\xe3\x88\x49\x14\x0a\xfc\x93\x82\xc0\x8c\x8b\x9c\xcc\x57\x2c\x83\x90\xc2\x79\x37\x8d\xa8\x31\x0d\x33\xf5\x0c\x0d\xd6\xc9\xb5\x7b\xc6\x90\xcf\xe0\x5c\x2e\xcb\xe4\xe6\x43\x04\x28\x04\x17\x36\xdd\x7f\xa8\xb0\x2f\x6e\x81\x90\x20\xe3\x4c\x2a\x90\xcb\x52\x2a\x01\x43\x98\x8e\xee\xc7\xe9\xc3\x04\x46\xf7\x93\x4f\x50\x87\xde\x46\x2d\x9c\xc2\xcf\x24\x08\xa6\xf6\x83\x5c\x96\x8a\xf3\x12\x12\x50\x62\x85\x30\x98\x5b\xf0\x06\xc6\x34\x26\x11\xfc\x71\x75\xf7\x98\x8e\x8f\xee\x79\xdf\xb2\x9f\x12\x12\x08\x94\xab\x52\xc5\x75\x80\x97\x43\xc8\x67\x49\xfa\x8c\x99\xcd\x2e\x6e\x42\x8c\xfb\xdc\x3c\x71\x7f\x78\x44\x82\x62\x5e\x6f\xff\x69\x08\xac\x28\x6d\xc6\x81\x40\xb5\x12\xcc\xae\x92\xc0\x23\x5f\xcc\x21\xf9\x2c\x8a\x8a\x8a\xf5\xaf\xb8\x4e\x46\xf2\x6a\xa5\xf8\x88\x65\xc2\x16\xa8\xa9\x4f\x91\x6f\x22\x71\x81\x25\x77\x54\x2a\x87\xf8\x28\x0f\x4f\x3c\x8b\x26\x5a\xb7\x8f\x6a\x33\xca\x18\x18\x42\xff\x67\xcb\x2d\x63\xc2\x22\x8f\x9a\x88\x91\xe5\xc6\x10\x7f\x00\x2b\x4a\xd2\x2f\x8c\x1b\x2c\x51\x21\x34\x8f\xd9\x1a\x16\xce\x39\x7c\xc3\xf5\xe5\x74\xf7\xb0\x76\x24\x53\x47\xb3\x7e\x77\x2f\x11\x2c\x86\xc3\x8e\x8f\x26\x18\xd5\x3c\xdc\xe7\xa5\xcd\xb9\x4b\xcd\x9b\xf4\x2e\x9d\xa4\xf0\xf1\xe1\xd3\x6f\x16\x90\x1d\x66\xfe\xf9\x4b\xfa\x90\x1e\x0b\x62\x08\xef\xa7\xce\xed\x5f\xae\xaa\xfd\xf4\x3a\xec\xc1\xd5\xa1\x5b\xf1\xba\x51\xb4\x8a\x6e\xdf\x5d\xdd\x77\x0b\xd5\x57\xa9\x0f\xeb\xa3\xcc\x00\x18\x63\x89\xd9\xb6\x0f\xfc\x78\x31\x8f\x9f\xf8\xff\x15\x39\xdc\xeb\x5c\x71\x5d\xe7\xe8\x84\x86\x34\x4e\xef\xd2\xeb\x09\x34\x6d\x62\x47\xfd\x73\x5a\xca\x56\xe7\xf1\x36\xbd\x04\x69\xbe\x9d\xc8\x93\x80\x5a\xd5\x77\x83\xd6\x86\x90\x60\xc3\x9d\xdf\x57\x28\xd6\x0f\xfc\x7b\xb7\x3d\x1d\x24\x50\x32\xce\x28\x0b\xfb\x32\x38\xad\x81\xb1\xa2\x8c\x7d\x67\xd9\x34\x82\x37\x34\x6e\x35\x83\xc7\x45\x4e\x15\xfa\xc7\xee\x05\xd2\x7f\x83\x38\xd3\xff\xf0\x02\x79\xfc\x7c\x73\x35\x49\xbb\xf0\x8f\xd3\x4d\x09\x41\xeb\x6e\x03\x97\xa8\xb6\x37\xc1\xa9\x5a\x0e\x5e\x10\xb2\x5c\x96\x2b\x87\x43\x73\x4c\x8d\x6e\x4b\xab\x56\x96\x5a\xbb\xbb\xff\xac\x80\xf8\xac\x60\x39\x3e\xd7\x43\xc7\xc8\xfe\x43\xb9\x99\x3d\xdc\x3c\xb2\x2f\x26\xb7\x25\xb9\xe5\xf5\x06\x9f\xab\x93\xed\x6c\x0d\xce\x21\xa3\x15\x5a\xb1\x36\xc6\x2d\xd3\x8d\x4c\x5f\xe3\xff\x45\x99\x6a\x0d\x4f\x7c\x41\x05\xad\xca\x42\x2a\x68\xd2\xaa\x21\xb0\xd3\x4a\x64\x29\x58\xcc\x81\x71\xff\x2d\x19\xc9\x47\x56\x2c\x6b\x88\xbe\x7c\xd5\xba\x99\x4a\xce\x37\x83\x58\x3b\x30\x30\x26\x06\xaf\x5e\xe7\x69\xdf\x4b\x7f\x03\x6f\x49\x19\x9a\xdf\x74\x4b\x86\x66\xe6\xeb\x13\xf5\xc6\xda\x4b\xbb\x09\xab\x2b\xf0\x8d\x9d\xa7\xd0\xd2\x6a\xd4\x23\x60\xf1\xde\x98\x34\x02\xef\x03\x5e\x9b\xad\xd9\x76\x12\x39\x24\xf7\x1e\xa8\xeb\x14\x5a\x82\xef\xcf\xb0\x2d\x7a\x7f\x5c\xdf\xf5\xe2\x7f\xdd\x2e\xe0\xd7\x5b\xd1\xee\xf7\x04\x5b\x4c\x7b\x5a\x33\xd2\x9c\x58\x95\xd7\x57\xe6\x35\xd5\x39\x5e\x21\x6f\xb1\x8c\xbb\xe0\xef\xcd\x81\x87\xa0\x87\x1f\x87\xd4\xff\xcb\x71\x8e\x02\x96\xc9\x75\xc9\x25\x86\x51\x1b\x6a\x69\x63\xfb\xf2\xb5\x5f\x25\x35\x8b\xbc\xed\x9c\x5b\x17\xf7\xf8\xac\xc2\xa8\x13\x41\x43\xc3\x7e\x9d\xb5\x89\xe8\xc9\x38\x84\xe5\xeb\x69\xf5\x12\x0e\xc7\xb0\xd8\xc5\xc3\xa7\x3e\x04\xba\x58\x20\xcb\x43\x81\x32\x86\x37\x34\x3a\x42\xc7\xda\xc4\xf1\xd1\x8f\xb1\xdb\x3f\xff\x06\x00\x00\xff\xff\xb2\xcf\x9f\x5f\x40\x0e\x00\x00")

func templatesTable_bilibiliTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTable_bilibiliTmpl,
		"templates/table_bilibili.tmpl",
	)
}

func templatesTable_bilibiliTmpl() (*asset, error) {
	bytes, err := templatesTable_bilibiliTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table_bilibili.tmpl", size: 3648, mode: os.FileMode(420), modTime: time.Unix(1581253167, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTable_stdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x11\xb4\x52\xe6\x29\xef\x01\x8c\x22\x4d\xd4\xcc\x58\x96\x76\xb1\xb3\x3d\x14\xc5\x4c\x5b\xe7\x40\xab\x44\xda\x24\xbd\xc6\x20\xf8\xbf\x0f\x14\x45\x99\x96\x15\xcf\x59\xe7\x17\x5b\xd4\xf1\x7e\x7d\xdf\x77\x3e\xb2\xa2\x8b\xaf\xf4\x09\xa1\xe2\x39\x96\x84\x14\xd5\x8a\x0b\x05\x31\x89\x06\x39\x55\x74\x4e\x25\x5e\xc8\x75\x39\x20\xd1\x40\x15\x15\x0e\x48\x42\xb4\x86\x33\x45\xe7\x25\xc2\xe5\x08\x52\x63\x08\xb9\xb8\x00\xad\xd3\x5b\x3e\xb5\xa7\xf7\xb4\x42\x63\x40\xe0\x4a\xa0\x44\xa6\x24\x50\x10\xfc\x1b\x2c\x05\xaf\xe0\xad\xd6\x69\x60\xf5\x36\x25\x6a\xbb\xc2\xc3\xdb\x52\x89\xcd\x42\x81\x26\x91\xd6\x3f\x81\xa0\xec\x09\x21\xfd\x50\x60\x99\x4b\x30\x86\x00\x00\x44\x5a\x43\x7a\xcb\xaf\x79\xb9\xa9\x98\xbd\x06\xc6\x80\xd6\xb0\x3b\x9c\x5a\xd7\xc6\xc0\xec\x2f\xc9\xd9\xe5\xc0\xda\xef\x59\x0f\x66\x50\x67\xee\x8f\xaf\x79\x55\x21\x53\x3e\x80\x8d\x8c\x2c\xb7\x8f\xae\xc6\x31\x93\x28\x14\xf8\x6f\x0a\x02\x17\x5c\xe4\x64\xb9\x61\x0b\x88\x29\x9c\x77\xcb\x48\x1a\xd3\x38\x9f\xc3\xb9\x5c\x97\xe9\xcd\xfb\x04\x50\x08\x2e\x6c\x65\x7f\x53\x61\x1f\xdc\x01\x21\xd1\x82\x33\xa9\x40\xae\x4b\xa9\x04\x8c\x60\x36\xbe\x9f\x64\x0f\x53\x18\xdf\x4f\x3f\x42\x9d\x65\xd8\xa0\x78\x06\x3f\x92\x28\x9a\xd9\x17\x72\x5d\x2a\xce\x4b\x48\x41\x89\x0d\xc2\x60\x69\xfb\x34\x30\xa6\x31\x49\xe0\xf7\xab\xbb\xc7\x6c\x72\xf4\xce\xbb\xc0\x7e\x46\x48\x24\x50\x6e\x4a\x35\xac\x13\xbc\x1c\x41\x3e\x4f\xb3\x67\x5c\xc4\x2e\xbb\x61\x9f\x87\x27\xee\xe3\x26\x24\x2a\x96\xf5\xcd\x1f\x46\xc0\x8a\xd2\x16\x1b\x09\x54\x1b\xc1\xec\x29\x89\x7c\x7f\x8b\x25\xa4\x9f\x44\x51\x51\xb1\xfd\x05\xb7\xe9\x58\x5e\x6d\x14\x1f\xb3\x85\xb0\x30\x34\x28\x14\x79\x9b\x84\xcb\x29\xbd\xa3\x52\xb9\xbe\x8e\xf3\xf8\xc4\x58\x34\xd5\x3a\x0c\x15\xf2\xc6\x18\x18\x41\xff\x6b\xcb\x20\x63\xe2\x22\x4f\x9a\x8c\x91\xe5\xc6\x10\x1f\x80\x15\x25\xe9\xa7\xff\x0d\x96\xa8\x10\x9a\xaf\xf9\x16\x56\xce\x39\x7c\xc5\xed\xe5\x6c\x3f\x58\x98\xc9\xcc\x91\xa9\xdf\x5d\x40\xa3\x21\xbc\xec\xe3\x68\x2d\x49\xcd\xb6\x43\xf6\xd9\xf2\xba\x04\xbc\xc9\xee\xb2\x69\x06\x1f\x1e\x3e\xfe\x6a\x6b\xdf\xe3\xdf\x1f\x3f\x67\x0f\xd9\xb1\x24\x46\xf0\x6e\xe6\xdc\xfe\xe9\x00\x3c\x20\xd1\xcb\x97\x5d\xb7\xbb\xb8\xd6\xa2\x0f\xa0\xb5\xcf\x0e\xdd\x7d\x38\xfa\xf0\x78\xbf\x3d\x8a\x3f\xc0\x04\x4b\x5c\xec\x34\xfd\xfd\x90\x1d\x8f\xf8\xbf\x40\x19\x1f\x0c\x9c\x61\x8d\x66\x72\xc2\x70\x99\x64\x77\xd9\xf5\x14\x1a\xc9\xef\xc9\x79\x49\x4b\x19\x4c\x11\x6f\xd3\x4b\x83\xe6\xdd\x89\x6c\x88\xa8\x95\x71\x37\x69\x6d\x08\x89\x5a\x86\xfc\xb6\x41\xb1\x7d\xe0\xdf\x82\x51\xf3\x22\x4d\xd2\xc9\x82\xb2\xb8\x2f\xf9\xd3\x86\x11\x2b\xca\xa1\x9f\x12\xad\xa8\xdf\xd0\x61\x20\xec\xc7\x55\x4e\x15\xfa\xaf\xfd\x91\xdf\x3f\xf3\x9d\xe9\x7f\x1b\xf9\x8f\x9f\x6e\xae\xa6\x59\xb7\xc9\x93\xac\x05\x0a\xb4\xee\xce\x5d\x89\x6a\x37\xbb\x4f\xd5\x65\xf4\xb2\x28\xe5\xba\xdc\xb8\x6a\x9b\x08\x75\x0f\x03\xdd\x59\x89\x69\xed\xfe\x93\xcf\x0a\x18\x9e\x15\x2c\xc7\xe7\x7a\x19\x18\xdb\x5f\x28\xdb\x9d\xc0\xed\x09\x87\xc2\x70\x57\xd2\x5b\x5e\x5f\xf0\x65\x3a\x09\xce\xb7\xe0\x1c\x32\x5a\xa1\x15\x5e\x63\x1c\x98\xb6\x92\x7b\x8d\xff\x50\x72\x5a\xc3\x13\x5f\x51\x41\xab\xb2\x90\x0a\x9a\x0a\xea\x6a\xed\xc2\x90\x58\x4e\x15\x4b\x60\xdc\xbf\x4b\xc7\xf2\x91\x15\xeb\xba\x1b\x9f\xbf\x68\xdd\x2c\x06\xe7\xed\x2e\x14\xe6\x00\xc6\x0c\xc1\x2b\xd1\x79\x3a\xf4\xd2\x3f\x72\x03\x59\x42\xf3\x99\xed\x20\x6f\xd6\xae\x3e\x81\xb6\xd6\x5e\xa6\x4d\x5a\x5d\xb1\xb6\x76\x9e\x28\x6b\xab\x37\xdf\x01\xdb\xda\xd6\xa4\x11\x6b\x5f\x8f\xb5\xd9\x99\xed\x36\x84\x1e\xe9\xf6\x74\xb9\xce\x3e\x10\x6f\x7f\x71\xa1\x80\x7d\xa4\xbe\x3f\x04\xff\xe9\x2a\xda\x9f\x07\x89\x1e\xea\xdb\xe2\x68\xa3\x35\xab\xc6\x89\x80\xbc\x1e\x94\xd7\x00\x73\x1c\x1c\x6f\xb1\x1e\x76\xfb\x1e\xae\x66\x2f\x75\x1d\xbe\xbf\x9b\xfe\x57\x8e\x4b\x14\xb0\x4e\xaf\x4b\x2e\x31\x4e\xc2\x2e\x4b\x9b\xd6\xe7\x2f\xfd\xda\xa8\xb9\xe3\x6d\x97\xdc\xba\xb8\xc7\x67\x15\x27\x9d\x0c\x1a\xf2\xf5\xab\x2b\xa4\x9f\xa7\xe0\x08\xd6\xaf\x67\xd4\xbf\xf5\xe1\x58\x2f\xf6\xfb\xe1\x4b\x1f\x01\x5d\xad\x90\xe5\xb1\x40\x39\x84\x37\x34\x39\xc2\xc4\xda\xc4\x51\xd1\x6f\x96\xbb\x1f\xff\x04\x00\x00\xff\xff\xd3\x3e\x5b\x40\x99\x0d\x00\x00")

func templatesTable_stdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTable_stdTmpl,
		"templates/table_std.tmpl",
	)
}

func templatesTable_stdTmpl() (*asset, error) {
	bytes, err := templatesTable_stdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table_std.tmpl", size: 3481, mode: os.FileMode(420), modTime: time.Unix(1581252682, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTable_std_contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x11\xb4\x56\xa6\x29\xef\x01\x8c\x22\x4d\xd4\xcc\x58\x96\x76\xb1\xb3\x3d\x14\xc5\x4c\x4b\xe7\x40\xab\x44\xda\x24\xbd\xc6\x20\xf8\xbf\x0f\x14\x49\x5b\xb6\x65\xc7\x41\x57\xbf\xc8\xa2\x4e\xf7\xeb\xfb\xbe\xd3\x91\x39\xcd\xbf\xd2\x27\x84\x9a\x17\x58\x11\x52\xd6\x73\x2e\x14\xf4\x09\x00\x40\x2f\xe7\x4c\xe1\xb3\xea\x91\xa8\x57\x50\x45\xa7\x54\xe2\x85\x5c\x54\xf6\x5e\x95\x35\xf6\x48\x4c\xb4\x86\x33\x45\xa7\x15\xc2\xe5\x00\x52\x63\x08\xb9\xb8\x00\xad\xd3\x5b\x3e\xb6\xa7\xf7\xb4\x46\x63\x40\xe0\x5c\xa0\x44\xa6\x24\x50\x10\xfc\x1b\xcc\x04\xaf\xe1\xad\xd6\x69\xcb\xea\x6d\x4a\xd4\x6a\x8e\xfb\x6f\x4b\x25\x96\xb9\x02\x4d\x22\xad\x7f\x01\x41\xd9\x13\x42\xfa\xa1\xc4\xaa\x90\x60\x4c\x93\x6a\xa4\x35\xa4\xb7\xfc\x9a\x57\xcb\x9a\xd9\xd7\xc0\x18\xd0\x1a\x36\x87\x63\xeb\xda\x18\x98\xfc\x23\x39\xbb\xec\x59\xfb\x2d\xeb\xde\x04\x9a\xcc\xc3\xf1\x35\xaf\x6b\x64\x2a\x04\xb0\x91\x91\x15\xf6\xd6\xd5\x38\x64\x12\x85\x82\x70\xa5\x20\x30\xe7\xa2\x20\xb3\x25\xcb\xa1\x4f\xe1\x7c\xb7\x8c\xd8\x9b\xf6\x73\xf5\x0c\xbe\xb3\xe9\xb5\xbb\x26\x50\x4c\xe1\x5c\x2e\xaa\xf4\xe6\x7d\x0c\x28\x04\x17\xb6\xdc\x7f\xa9\xb0\x37\xee\x80\x90\x28\xe7\x4c\x2a\x90\x8b\x4a\x2a\x01\x03\x98\x0c\xef\x47\xd9\xc3\x18\x86\xf7\xe3\x8f\xd0\xa4\xde\xee\x5a\x7f\x02\x3f\x93\x28\x9a\xd8\x07\x72\x51\x29\xce\x2b\x48\x41\x89\x25\x42\x6f\x66\x9b\xd7\x33\xc6\x9b\xc4\xf0\xe7\xd5\xdd\x63\x36\x3a\xfa\xce\xbb\x96\xfd\x84\x90\x48\xa0\x5c\x56\x2a\x69\x12\xbc\x1c\x40\x31\x4d\xb3\x67\xcc\x7d\x41\xb6\xc8\xc4\x67\x9a\x74\x79\x7b\xe2\x21\x87\x98\x44\xe5\xac\xf1\xf2\xd3\x00\x58\x59\xd9\xc2\x23\x81\x6a\x29\x98\x3d\x25\x51\x00\xa0\x9c\x41\xfa\x49\x94\x35\x15\xab\xdf\x70\x95\x0e\xe5\xd5\x52\xf1\x21\xcb\x85\xc5\xc9\xc3\x54\x16\xeb\x84\x5c\x7e\xe9\x1d\x95\xca\x35\x7e\x58\xf4\x4f\x8c\x45\x53\xad\xdb\xa1\xda\xc4\x32\x06\x06\xd0\xfd\xd8\x52\xcc\x98\x7e\x59\xc4\x3e\x63\x64\x85\x31\x24\x04\x60\x65\x45\xba\xf5\x71\x83\x15\x2a\x04\x7f\x99\xae\x60\xee\x9c\xc3\x57\x5c\x5d\x4e\xb6\x83\xb5\x33\x99\x38\xb6\x75\xbb\x7b\x89\x67\x09\x1c\x76\x7c\xb4\xc0\xb8\xa1\xe3\x3e\x3d\x6d\xcd\xbb\x0c\xbd\xc9\xee\xb2\x71\x06\x1f\x1e\x3e\xfe\x6e\x1b\xb2\x45\xd0\xbf\x7e\xcd\x1e\xb2\x63\x49\x0c\xe0\xdd\xc4\xb9\xfd\xdb\xa1\x7a\x94\x65\x87\x1d\x39\x38\x76\x81\x6f\xc6\x46\x0b\x7b\x7b\xef\xe0\xdf\xc6\xab\x0b\xb0\xf7\xab\xa3\x04\x01\x18\x61\x85\xf9\x66\x2a\x7c\x3f\xa6\xc7\x23\xfe\x38\xac\xfb\x7b\x73\x2c\x69\xe0\x8e\x4f\x18\x4f\xa3\xec\x2e\xbb\x1e\x83\x1f\x1a\x5b\x43\x60\x46\x2b\xd9\x9a\x43\xc1\xa6\x93\x27\xfe\xd9\x89\x74\x89\xa8\x15\xff\x6e\xd2\xda\x10\x12\xad\x29\xf4\xc7\x12\xc5\xea\x81\x7f\x3b\x30\xac\x0e\xf2\x28\x1d\xe5\x94\xf5\xbb\x0a\x39\x6d\x9c\xb1\xb2\x4a\xc2\x9c\x59\x8f\x85\x37\x34\x69\x8d\x86\xc7\x79\x41\x15\x86\xcb\xf6\x57\xa5\xfb\xb3\xe2\x4c\xff\xc7\xaf\xca\xe3\xa7\x9b\xab\x71\xb6\x8b\xc2\x28\x5b\x23\x09\x5a\xef\x8e\x73\x89\x6a\xf3\x79\x38\x55\xd9\xd1\x69\xb2\x96\x8b\x6a\xe9\xda\xe1\xa3\x35\x4d\x6e\x29\xd7\x8a\x54\x6b\xb7\x17\x9c\x95\x90\x9c\x95\xac\xc0\xe7\x66\x21\x19\xda\x7f\x28\xd7\x7b\x89\xdb\x55\xf6\xa5\xe5\x5e\x49\x6f\x79\xf3\x42\x28\xd9\x89\x78\xba\x02\xe7\x90\xd1\x1a\xad\x74\xbd\x71\xcb\x74\x2d\xda\xd7\xf8\x7f\x51\xb4\x5a\xc3\x13\x9f\x53\x41\xeb\xaa\x94\x0a\x7c\x59\x4d\x0b\xec\x26\x13\x5b\x26\x96\x33\x60\x3c\x3c\x4b\x87\xf2\x91\x95\x8b\xa6\x45\x9f\xbf\x68\xed\x37\x96\xf3\xf5\x92\xd6\x4e\x0c\x8c\x49\x20\x68\xd9\x79\xda\xf7\xd2\x3d\xd5\x5b\xc2\x06\xff\x9b\x6c\x38\xe1\xf7\xc1\x2e\x89\xaf\xad\x83\xd0\x7d\x5a\xbb\x72\x5f\xdb\x05\x26\x2d\xac\x62\x43\x07\x6c\xbf\xd7\x26\x5e\xee\x5d\x8d\xd7\x66\x63\xb6\xd9\x52\x5e\x10\x7f\x47\xc7\x9b\x4a\x5a\xf2\xef\x2e\xb4\x3d\x02\x42\xd4\xae\x6f\x4e\xf8\xed\xce\x84\x70\xde\x4a\x7a\x7f\x42\x58\x4c\x6d\x34\xbf\xee\x9c\x08\xce\xeb\x01\x7a\x0d\x48\xc7\x81\x0a\x16\x8b\x64\x17\x83\x43\xab\xe2\x21\x04\xe0\xfb\x3b\x1b\xfe\x15\x38\x43\x01\x8b\xf4\xba\xe2\x12\xfb\x71\xbb\xe3\xd2\xa6\xf8\xf9\x4b\xb7\x66\x1a\x4e\x05\xdb\x19\xb7\x2e\xee\x6d\x09\xf1\x4e\x06\x9e\x94\xdd\xaa\x6b\xd3\x32\x50\x73\x00\x8b\xd7\xb3\xeb\xa5\x3e\x1c\xeb\xc5\x76\x3f\x42\xe9\x03\xa0\xf3\x39\xb2\xa2\x2f\x50\x26\xf0\x86\xc6\x47\x58\xd9\x98\x38\x5a\x86\x4d\x77\xf3\xe7\xbf\x00\x00\x00\xff\xff\xb9\xfe\xd4\xf7\x58\x0e\x00\x00")

func templatesTable_std_contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTable_std_contextTmpl,
		"templates/table_std_context.tmpl",
	)
}

func templatesTable_std_contextTmpl() (*asset, error) {
	bytes, err := templatesTable_std_contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table_std_context.tmpl", size: 3672, mode: os.FileMode(420), modTime: time.Unix(1581252727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/table_bilibili.tmpl": templatesTable_bilibiliTmpl,
	"templates/table_std.tmpl": templatesTable_stdTmpl,
	"templates/table_std_context.tmpl": templatesTable_std_contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"table_bilibili.tmpl": &bintree{templatesTable_bilibiliTmpl, map[string]*bintree{}},
		"table_std.tmpl": &bintree{templatesTable_stdTmpl, map[string]*bintree{}},
		"table_std_context.tmpl": &bintree{templatesTable_std_contextTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

