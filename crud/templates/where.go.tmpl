package {{.PackageName}}

import (
	"github.com/hongshengjie/crud/xsql"
	{{if .WhereImportTime}}"time"{{end}}
)
{{ $tableName := .GoTableName}}

type {{$tableName}}Where func(s *xsql.Selector)


// And groups predicates with the AND operator between them.
func And(predicates ...{{$tableName}}Where) {{$tableName}}Where {
	return {{$tableName}}Where(func(s *xsql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...{{$tableName}}Where) {{$tableName}}Where {
	return {{$tableName}}Where(func(s *xsql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p {{$tableName}}Where) {{$tableName}}Where {
	return {{$tableName}}Where(func(s *xsql.Selector) {
		p(s.Not())
	})
}

{{- range .IndexesCol }}
		{{$c1:=eq .BigType  1}}
		{{$c2:=eq .BigType  3}}
		{{if  or $c1 $c2  }}
			// {{ .GoColumnName }}EQ  =
			func {{ .GoColumnName }}EQ(arg {{.GoColumnType}}) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.EQ({{ .GoColumnName }}, arg))
				})
			}
			// {{ .GoColumnName }}NEQ <>
			func {{ .GoColumnName }}NEQ(arg {{.GoColumnType}}) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.NEQ({{ .GoColumnName }}, arg))
				})
			}
			// {{ .GoColumnName }}LT <
			func {{ .GoColumnName }}LT(arg {{.GoColumnType}}) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.LT({{ .GoColumnName }}, arg))
				})
			}
			// {{ .GoColumnName }}LET <=
			func {{ .GoColumnName }}LTE(arg {{.GoColumnType}}) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.LTE({{ .GoColumnName }}, arg))
				})
			}
			// {{ .GoColumnName }}GT >
			func {{ .GoColumnName }}GT(arg {{.GoColumnType}}) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.GT({{ .GoColumnName }}, arg))
				})
			}
			// {{ .GoColumnName }}GTE >=
			func {{ .GoColumnName }}GTE(arg {{.GoColumnType}}) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.GTE({{ .GoColumnName }}, arg))
				})
			}
			// {{ .GoColumnName }}In in(...)
			func {{ .GoColumnName }}In(args ...{{.GoColumnType}}) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					if len(args) == 0 {
						s.Where(xsql.False())
						return
					}
					v := make([]interface{}, len(args))
					for i := range v {
						v[i] = args[i]
					}
					s.Where(xsql.In( {{ .GoColumnName }}, v...))
				})
			}
			// {{ .GoColumnName }}NotIn not in(...)
			func {{ .GoColumnName }}NotIn(args ...{{.GoColumnType}}) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					if len(args) == 0 {
						s.Where(xsql.False())
						return
					}
					v := make([]interface{}, len(args))
					for i := range v {
						v[i] = args[i]
					}
					s.Where(xsql.NotIn( {{ .GoColumnName }}, v...))
				})
			}
		{{else if  eq .BigType  2}}
			// {{ .GoColumnName }}EQ = 
			func {{ .GoColumnName }}EQ(v string) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.EQ( {{ .GoColumnName }} , v))
				})
			}
			// {{ .GoColumnName }}EQ <>
			func {{ .GoColumnName }}NEQ(v string) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.NEQ( {{ .GoColumnName }} , v))
				})
			}
			// {{ .GoColumnName }}In in(...)
			func {{ .GoColumnName }}In(vs ...string) {{$tableName}}Where {
				v := make([]interface{}, len(vs))
				for i := range v {
					v[i] = vs[i]
				}
				return {{$tableName}}Where(func(s *xsql.Selector) {
					// if not arguments were provided, append the FALSE constants,
					// since we can't apply "IN ()". This will make this predicate falsy.
					if len(v) == 0 {
						s.Where(xsql.False())
						return
					}
					s.Where(xsql.In( {{ .GoColumnName }} , v...))
				})
			}
			// {{.GoColumnName}}NotIn not int(...)
			func {{ .GoColumnName }}NotIn(vs ...string) {{$tableName}}Where {
				v := make([]interface{}, len(vs))
				for i := range v {
					v[i] = vs[i]
				}
				return {{$tableName}}Where(func(s *xsql.Selector) {
					// if not arguments were provided, append the FALSE constants,
					// since we can't apply "IN ()". This will make this predicate falsy.
					if len(v) == 0 {
						s.Where(xsql.False())
						return
					}
					s.Where(xsql.NotIn( {{ .GoColumnName }} , v...))
				})
			}
			// {{ .GoColumnName }}HasPrefix HasPrefix
			func {{ .GoColumnName }}HasPrefix(v string) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.HasPrefix( {{ .GoColumnName }} , v))
				})
			}
			// {{ .GoColumnName }}HasSuffix HasSuffix
			func {{ .GoColumnName }}HasSuffix(v string) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.HasSuffix( {{ .GoColumnName }} , v))
				})
			}
			// {{ .GoColumnName }}Contains Contains
			func {{ .GoColumnName }}Contains(v string) {{$tableName}}Where {
				return {{$tableName}}Where(func(s *xsql.Selector) {
					s.Where(xsql.Contains( {{ .GoColumnName }}, v))
				})
			}
		{{end}}
{{- end}}




