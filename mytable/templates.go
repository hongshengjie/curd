// Code generated by go-bindata.
// sources:
// templates/default.tmpl
// DO NOT EDIT!

package mytable

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdf\x6f\xdb\xb6\x13\x7f\x96\xfe\x8a\xfb\x0a\x5f\xa4\x52\xab\xd1\x1d\x30\xec\x21\x9b\x51\xa4\x89\xdb\x65\xcb\x92\x2e\x76\xd6\x87\xa2\x80\x69\x89\x72\xd4\xca\xa4\x4d\x51\x75\x0d\x41\xff\xfb\x70\x3c\xc9\x96\x65\x39\x49\x8b\xe6\x21\xb6\x8e\xbc\x1f\x9f\xbb\x0f\x8f\x27\xbb\x4b\x1e\x7d\xe6\x73\x01\x65\xc9\xde\xd1\xd7\x6b\xbe\x10\x55\xe5\xba\xe9\x62\xa9\xb4\x01\xdf\x05\x00\xf0\x66\x1b\x23\x72\xcf\x75\xbc\x48\x49\x23\xbe\x1a\xfc\x2a\xb4\x56\xda\x0a\x73\xa3\x53\x39\xc7\xaf\x65\x99\x26\xc0\x2e\xad\xee\x24\x45\x4b\x9e\x49\x17\xc2\x2b\x4b\x21\xe3\xaa\x22\x63\xf3\xd4\xdc\x17\x33\x16\xa9\xc5\xe0\x5e\xc9\x79\x7e\x2f\xe4\xfc\x53\x2a\x06\x91\x2e\x62\xcf\x71\x03\xb7\x2c\xe1\xff\x86\xcf\x32\x01\xa7\x43\x60\x18\xcd\x60\x80\x21\xbe\x55\x13\x94\x52\x88\xa0\xc5\x52\x8b\x5c\x48\x93\x03\x07\xad\xd6\x90\x68\xb5\x80\x67\x65\xc9\x5a\xbb\x9e\x31\xd7\x6c\x96\xe2\x50\x3b\x37\xba\x88\x0c\x94\x18\xf3\x4f\xa0\xb9\x9c\x0b\x60\x6f\x52\x91\xc5\x39\xd4\x81\x3a\x65\x09\xec\xad\x3a\x57\x59\xb1\x90\xa8\x06\x55\x05\x65\x09\x3b\xe1\x04\x4d\x57\x15\x4c\x3f\xe5\x4a\x9e\x7a\xb8\x7f\x6f\xb7\x37\x05\x1b\x79\x23\x3e\x57\x8b\x85\x90\xa6\x71\x80\x9e\x85\x8c\xf1\xb1\x72\xdd\x48\xc9\xbc\x49\x38\xa1\x1f\x82\x37\xdd\x87\x33\xf5\xec\x72\x42\x71\x0e\xc1\x2b\xcb\x7c\x95\x19\xa5\x32\x60\x90\xf0\x2c\x17\xe0\xd9\x45\xaf\xaa\xbc\xad\x8f\x5e\x74\xf8\x37\x18\x1c\x81\xd8\x1f\x6f\x6f\x42\x28\xc8\x0e\xf0\xa9\x07\x5d\x84\x81\x6b\xcb\x78\x29\x73\xa1\x0d\x34\x9f\x1c\xb4\x88\x94\x8e\xdd\xa4\x90\x51\x2d\xf4\x23\xf3\x15\x6a\xa2\xb1\x73\xfa\x0c\x21\x9e\x01\x12\x84\x5d\xbc\x0e\x81\xc3\xf3\x83\x82\x06\x60\x09\x89\x15\xa5\x4c\xe6\xab\x2c\x37\x1a\xe3\xbb\xbc\x1e\x8f\x6e\x27\x70\x79\x3d\xb9\x01\xe8\x66\x14\x7c\x0f\x5e\xb8\x8e\xe3\x21\xee\x5d\x32\x8d\x2e\xda\xb9\xb4\x5b\xa6\x01\xfc\x7b\x76\x75\x37\x1a\x83\x3f\x25\x41\x9f\xce\x2b\x0f\xad\xd2\xfe\xa9\xeb\x3a\x5a\xe4\x45\x66\x42\x0c\x0f\xf9\x1c\xcf\xd8\xe8\xab\x88\x6a\x5c\x88\x35\xac\x43\x0d\xfb\xac\xcd\x55\x13\x43\xe0\x3a\x69\x62\xad\xfc\x6f\x08\x32\xcd\x10\xa9\xa3\x85\x29\xb4\x44\xa9\xeb\x34\xa4\xc2\x23\xf8\x4e\xa7\x0b\xae\x37\x7f\x89\x0d\xbb\xcc\xcf\x0a\xa3\x2e\x65\xa4\xb1\x96\x75\x29\xd3\x78\x1b\x10\xc5\xc7\xae\x78\x6e\x28\xff\x97\xb1\xff\x44\x5f\x9c\x61\xe3\xd8\xb9\x6a\x73\xc3\x52\xa3\x7f\x19\x8f\x4d\x55\xf9\x69\x1c\xd4\x11\x53\x73\x68\x1c\xc8\x34\x73\xe9\xcc\x5f\x88\x4c\x18\xd1\x7c\xcc\x36\xb0\x24\x63\xf0\x59\x6c\x4e\xa7\xfb\xc6\xdb\x9e\xa7\x44\x27\xd2\x7b\x9c\x4e\xc7\x0d\x3d\x08\x20\xf0\x53\x69\x7e\xfd\x25\xb4\xbc\x0b\x4a\x8b\xa5\x43\xbd\xe9\xc5\xe8\x6a\x34\x19\xc1\x9b\xdb\x9b\xbf\x11\x68\x9b\x79\xf0\xfe\x8f\xd1\xed\xe8\x21\xe7\x43\x78\x35\xb5\x56\xbf\x89\x42\xc7\xcc\x3d\x54\xd3\x97\x61\x53\xd6\x46\x52\xb3\xe2\x56\xad\xf3\xb3\x24\x11\x91\x11\xc8\x0a\x2a\xcb\xfb\x7b\xa1\x05\x40\xa4\x05\x37\x02\xd6\xf6\x69\x56\xa4\x59\x2c\x34\x24\x4a\x43\xb1\x8c\x71\x41\x69\x58\x15\x42\x6f\x80\xaa\x61\xb5\xfc\x00\x9e\xdb\xbc\x93\x8d\x72\xeb\xef\x64\x27\x2d\xab\xda\xcf\x3f\x56\xbb\x76\x43\xa6\x1a\x37\xb0\xe0\x9b\x99\x80\x75\x6a\xee\x3b\x01\x90\x33\xab\xea\xd3\xca\xce\xf2\x6b\xda\x13\x90\xc8\xee\xa9\x45\x07\x91\xd8\x45\xcc\x90\xad\xd8\x29\x6c\xbb\x72\xe8\x3a\xce\x59\x96\x51\x33\x3d\xad\x5b\x31\x0a\xad\x07\xda\x68\xfd\x86\x98\x4e\x02\xf2\x26\x95\xf1\x8d\x14\x90\xa4\x32\xee\xb4\xbc\x7a\xe9\x71\x92\x5a\x7c\xf4\xb8\x85\xe1\x1f\xb4\xc1\x90\xba\x60\x80\x78\xf2\x55\x16\x02\xd7\xf3\x1c\x39\x63\xd5\x49\x13\x4f\x77\x8d\xb5\xf6\x7e\xcb\xd7\xc4\xa2\x78\x66\x99\x44\x6a\x8c\xb1\x60\x1f\xc0\x2d\x5f\xef\x63\xc0\x33\xa9\xf9\x1a\x75\x60\x0f\x4f\x6d\xf1\x61\x48\xa8\x45\xb3\x43\x1d\x27\x63\x2c\x95\x46\xe8\x84\x47\xa2\xac\x1e\xc3\xc7\x11\x57\x77\x43\x59\xb9\xce\xee\x98\xd8\x2a\xde\xaa\x75\xf7\xa8\xec\x00\xb2\x71\xc4\xa5\xbf\xd7\x78\xeb\x7b\xf4\x69\x9d\x57\xa6\xd9\xc1\xd9\x39\xe1\x61\xab\x89\x61\x46\xe8\xdf\x82\xcb\x4d\x2b\x71\xc4\xce\xdc\x70\x63\x2f\xd9\xed\x71\xd9\x4a\x76\x19\xfd\x4e\x7a\x7c\xf8\xf8\x23\x08\xf2\x24\x76\x20\x35\x9a\xcf\x0e\xce\x43\x82\xfc\x20\x76\x3c\x02\x6f\xd5\x6e\x98\x96\x09\xc7\x69\xf0\xd4\x0a\xc7\x22\x11\x1a\x56\xec\x3c\x53\xb9\xf0\x03\xba\xde\xd1\x45\x4f\x2c\x48\x45\x6c\x87\x2b\x76\x8d\x4e\x6d\x4c\xc7\x49\x6b\x59\x3b\x84\x55\x43\xc8\x87\xf9\xd8\x13\xee\x61\xbc\x18\xb0\x8d\x6f\x08\x7c\xb9\x14\x32\xf6\xb5\xc8\x43\x38\xe1\x81\xc5\x92\x26\xb0\x62\x23\xad\xfd\xe0\x11\xd4\xed\x4b\xa1\xcd\xec\x73\x55\x48\x53\xff\x6f\xd4\x8a\xc5\x4c\x68\x50\x09\x4e\xe4\x39\x98\x7b\x6e\x20\x49\x0d\x98\x7b\xd1\xe5\x3b\xd1\xc1\x6a\x7f\x27\xbd\xe9\xfa\x7d\x22\xa1\xbf\x70\x0d\x1c\xac\xca\xb6\xd8\x0f\x34\x09\x6f\x3c\xba\x1a\x9d\x4f\xe0\xfc\xe6\xee\x7a\xe2\xff\x1c\xd0\x15\x7e\x30\x3c\x7a\x2f\x7a\xba\xc9\x09\x0f\x7e\x7b\xf2\x45\xbb\xeb\x15\x36\xa7\x77\xf6\xee\x6c\x6e\xa5\xbd\x27\x7a\x93\xd9\xdf\xb0\x3d\x10\x40\xf3\xc7\xf1\x79\xdf\x19\x0b\x63\x79\xd7\x9e\x09\x7c\xae\xe7\xd0\x92\xd6\x83\xcd\xbe\xdb\xce\x20\xef\x8c\xf9\x97\x47\xef\xab\x6e\x75\x6a\xc6\x90\xe1\x06\xd7\x1e\x22\xdd\x7a\x25\x5b\x37\x03\x46\xe7\xe2\x76\x9d\x33\x2c\x2e\xc0\x87\x8f\xad\x4e\xe0\x3a\x35\xd2\x0f\x1f\xa9\x5f\xb8\xd5\xce\x57\x43\x4c\xbe\x75\x43\xbc\xa3\xa7\xe3\x13\xc2\xf3\x66\x7b\x6b\x30\xa8\x45\x58\xce\x35\x5d\xf6\xed\x8b\xbe\x37\xf3\x83\x01\xf4\xe5\x1d\x72\x61\x30\xef\x6d\x19\xc5\xe5\x17\x5b\xd7\x41\xaf\xea\x91\x92\x75\x78\x51\xba\x4e\xd1\x84\xb1\x3d\xfd\x8d\x24\xa4\xf7\xca\xbd\x89\x19\x87\x4d\xf0\x02\x54\xb3\x39\x6e\x29\xe1\xb3\xa5\xf8\xee\x5a\x28\xdc\x0a\x1c\xb7\x45\x0a\xc4\xc9\xbf\x08\x88\x15\xf0\x66\xfe\x6b\x4e\x7a\x1f\xb0\xef\xa0\x10\x62\xc2\x43\xdc\xb4\x11\x5b\x69\x3a\xd6\x18\x70\x87\x12\x69\x02\x05\xa3\xad\xad\x53\x48\xf5\x22\x85\x61\xb3\x61\xd7\x23\x48\x2f\x13\x72\x9b\xaa\x00\x7e\x1f\xc2\xcb\xc3\x13\xac\x74\xce\xae\xc5\xda\xf7\xa4\x32\xb6\x98\x35\x66\x1a\x07\xbd\x80\xda\x26\x06\x37\x03\xfb\xe3\x09\x7b\x5d\x24\x09\x32\x78\xc6\xde\xeb\xd4\x88\xb1\x8d\xdf\xf7\xee\xde\x5d\x9c\x4d\x46\x36\xf3\xfb\x2b\x76\xd8\x3c\x90\x7a\x30\x1e\x4d\x7a\x76\xd7\x3f\xc1\xb0\x3f\x55\x2a\xdb\x75\x0e\xbd\xe0\x60\xaf\x05\xfd\x70\xa5\xeb\x3b\xf1\x09\xef\x1d\x33\x56\x5b\x0d\x42\x20\x03\x8f\x5c\xa7\xdf\xf0\xaa\xe1\xfe\x17\x00\x00\xff\xff\x05\x6e\x5f\x38\xa0\x12\x00\x00")

func templatesDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultTmpl,
		"templates/default.tmpl",
	)
}

func templatesDefaultTmpl() (*asset, error) {
	bytes, err := templatesDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.tmpl", size: 4768, mode: os.FileMode(436), modTime: time.Unix(1609770302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.tmpl": templatesDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templatesDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

