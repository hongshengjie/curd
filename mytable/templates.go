// Code generated by go-bindata.
// sources:
// templates/bilibili.tmpl
// templates/std.tmpl
// templates/std_context.tmpl
// DO NOT EDIT!

package mytable

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBilibiliTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x51\xb4\x52\xa7\x2a\xef\x01\x8c\x22\x4d\xd4\xcc\x58\x96\x76\xb1\xb3\x3d\x14\xc5\x4c\x4b\xe7\x40\xab\x44\x5a\x24\xbd\xc6\x20\xf8\xbf\x0f\x14\x45\x5b\x96\x15\xc7\x41\x37\xbf\xc8\xa2\x8e\xf7\xe3\xbb\xef\x3b\x92\xac\x68\xf6\x8d\x3e\x20\x54\x3c\xc7\x92\x90\xa2\x5a\x71\xa1\x20\x24\x00\x00\xa3\x8c\x33\x85\x8f\x6a\x44\x82\xd1\x03\x7f\x97\xf1\xaa\xe2\xec\xac\x2c\x16\x82\x8a\xcd\x59\x4e\x15\x5d\x50\x89\x67\xb2\x2e\x47\x24\xd0\xba\x58\x42\x32\x69\xf6\xcf\x8a\x0a\x8d\x19\xa9\xa2\xc2\x91\xd6\xc8\x72\x63\x48\x44\xb4\x86\x57\x8a\x2e\x4a\x84\xf3\x31\x24\xc6\x10\x72\x76\x06\x5a\x27\xd7\x7c\x66\x57\x6f\xa9\xdd\x04\x02\x57\x02\x25\x32\x25\x81\x82\xe0\xdf\x61\x29\x78\x05\x6f\xb4\x4e\x3a\x56\x6f\x12\xa2\x36\x2b\x3c\xdc\x2d\x95\x58\x67\x0a\xb4\xcd\xe7\x1d\x08\xca\x1e\x10\x92\x8f\x05\x96\xb9\x04\x63\x9a\xaa\x02\xad\x21\xb9\xe6\x97\xbc\x5c\x57\xcc\x6e\x03\x63\x40\x6b\xd8\x2d\xce\xac\x6b\x63\x60\xfe\xb7\xe4\xec\x7c\x64\xed\xf7\xac\x47\x73\x68\x32\xf7\xcb\x97\xbc\xaa\x90\x29\x1f\xc0\x46\x46\x96\xdb\x57\x57\xe3\x84\x49\x14\x0a\xfc\x93\x82\xc0\x8c\x8b\x9c\x2c\xd7\x2c\x83\x90\xc2\xdb\x7e\x19\x51\x6b\x1a\x66\xea\x11\xda\x26\x24\x97\xee\x19\x43\xbe\x80\xb7\xb2\x2e\x93\xab\x0f\x11\xa0\x10\x5c\xd8\x72\xff\xa1\xc2\xbe\xb8\x05\x42\x82\x8c\x33\xa9\x40\xd6\xa5\x54\x02\xc6\x30\x9f\xdc\x4e\xd3\xbb\x19\x4c\x6e\x67\x9f\xa0\x49\xbd\x8b\x5a\x38\x87\x9f\x49\x10\xcc\xed\x07\x59\x97\x8a\xf3\x12\x12\x50\x62\x8d\x30\x5a\x5a\xf0\x46\xc6\xb4\x26\x11\xfc\x71\x71\x73\x9f\x4e\x8f\xee\x79\xdf\xb1\x9f\x13\x12\x08\x94\xeb\x52\xc5\x4d\x82\xe7\x63\xc8\x17\x49\xfa\x88\x99\xad\x2e\x6e\x53\x8c\x87\xdc\x3c\x70\x1f\x3c\x22\x41\xb1\x6c\xb6\xff\x34\x06\x56\x94\xb6\xe2\x40\xa0\x5a\x0b\x66\x57\x49\xe0\x91\xb7\x1c\xfc\x2c\x8a\x8a\x8a\xcd\xaf\xb8\x49\x26\xf2\x62\xad\xf8\x84\x65\xc2\x36\xa8\xed\x4f\x91\x6f\x33\x71\x89\x25\x37\x54\x2a\x87\xf8\x24\x0f\x4f\x8c\x45\x13\xad\xbb\xa1\xba\x8c\x32\x06\xc6\x30\xfc\xd9\x72\xcb\x98\xb0\xc8\xa3\x36\x63\xa7\x0e\x1f\x80\x15\x25\x19\x16\xc6\x15\x96\xa8\x10\xda\xc7\x62\x03\x2b\xe7\x1c\xbe\xe1\xe6\x7c\xbe\x1f\xac\x9b\xc9\xdc\xd1\x6c\xd8\xdd\x73\x04\x8b\xe1\x69\xc7\x47\x0b\x8c\x1a\x1e\x1e\xf2\xd2\xd6\xdc\xa7\xe6\x55\x7a\x93\xce\x52\xf8\x78\xf7\xe9\x37\x0b\xc8\x1e\x33\xff\xfc\x25\xbd\x4b\x8f\x25\x31\x86\xf7\x73\xe7\xf6\x2f\xd7\xd5\x61\x7a\x3d\xed\xc1\xf5\xa1\xdf\xf1\x66\x50\x74\x9a\x6e\xdf\x5d\xdf\xf7\x1b\x35\xd4\xa9\x0f\x9b\xa3\xcc\x00\x98\x62\x89\xd9\x6e\x0e\xfc\x78\x33\x8f\x47\xfc\xff\x9a\x1c\x1e\x4c\xae\xb8\xe9\x73\x74\xc2\x40\x9a\xa6\x37\xe9\xe5\x0c\xda\x31\xb1\xa7\xfe\x25\x2d\x65\x67\xf2\x78\x9b\x41\x82\xb4\xdf\x4e\xe4\x49\x40\xad\xea\xfb\x49\x6b\x43\x48\xb0\xe5\xce\xef\x6b\x14\x9b\x3b\xfe\xbd\x3f\x9e\x9e\x24\x50\x32\xcd\x28\x0b\x87\x2a\x38\x6d\x80\xb1\xa2\x8c\xfd\x64\xd9\x0e\x82\xd7\x34\xee\x0c\x83\xfb\x55\x4e\x15\xfa\xc7\xfe\x01\x32\x7c\x82\x38\xd3\xff\xf0\x00\xb9\xff\x7c\x75\x31\x4b\xfb\xf0\x4f\xd3\x6d\x0b\x41\xeb\xfe\x00\x97\xa8\x76\x27\xc1\xa9\x5a\x0e\x9e\x11\xb2\xac\xcb\xb5\xc3\xa1\x0d\xd3\xa0\xdb\xd1\xaa\x95\xa5\xd6\xee\xec\x7f\x55\x40\xfc\xaa\x60\x39\x3e\x36\x97\x8e\x89\xfd\x87\x72\x7b\xf7\x70\xf7\x91\x43\x31\xb9\x2d\xc9\x35\x6f\x36\xf8\x5a\x9d\x6c\x17\x1b\x70\x0e\x19\xad\xd0\x8a\xb5\x35\xee\x98\x6e\x65\xfa\x12\xff\xcf\xca\x54\x6b\x78\xe0\x2b\x2a\x68\x55\x16\x52\x41\x5b\x56\x03\x81\xbd\xad\x44\x96\x82\xc5\x12\x18\xf7\xdf\x92\x89\xbc\x67\x45\xdd\x40\xf4\xe5\xab\xd6\xed\xad\xe4\xed\xf6\x22\xd6\x4d\x0c\x8c\x89\xc1\xab\xd7\x79\x3a\xf4\x32\x3c\xc0\x3b\x52\x86\xf6\x37\xdf\x91\xa1\xbd\xf3\x0d\x89\x7a\x6b\xed\xa5\xdd\xa6\xd5\x17\xf8\xd6\xce\x53\xa8\xb6\x1a\xf5\x08\x58\xbc\xb7\x26\xad\xc0\x87\x80\xd7\x66\x67\xb6\xbb\x89\x3c\x25\xf7\x01\xa8\x9b\x12\x3a\x82\x1f\xae\xb0\x2b\x7a\x1f\x6e\xe8\x78\xf1\xbf\xfe\x14\xf0\xeb\x9d\x6c\x0f\x67\x82\x6d\xa6\x8d\xd6\x5e\x69\x4e\xec\xca\xcb\x3b\xf3\x92\xee\x1c\xef\x90\xb7\xa8\xe3\x3e\xf8\x07\xf7\xc0\xa7\xa0\x87\x1f\x87\xd4\xff\xcb\x71\x89\x02\xea\xe4\xb2\xe4\x12\xc3\xa8\x0b\xb5\xb4\xb9\x7d\xf9\x3a\xac\x92\x86\x45\xde\x76\xc9\xad\x8b\x5b\x7c\x54\x61\xd4\xcb\xa0\xa5\xe1\xb0\xce\xba\x44\xf4\x64\x1c\x43\xfd\x72\x5a\x3d\x87\xc3\x31\x2c\xf6\xf1\xf0\xa5\x8f\x81\xae\x56\xc8\xf2\x50\xa0\x8c\xe1\x35\x8d\x06\xb0\x2b\x96\x50\x27\xa9\x10\x61\xf4\xf2\xa8\x87\xa4\x6e\x02\x39\x56\xfb\xcb\xf0\xee\xcf\xbf\x01\x00\x00\xff\xff\x4b\x05\x09\x8a\x9f\x0e\x00\x00")

func templatesBilibiliTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBilibiliTmpl,
		"templates/bilibili.tmpl",
	)
}

func templatesBilibiliTmpl() (*asset, error) {
	bytes, err := templatesBilibiliTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bilibili.tmpl", size: 3743, mode: os.FileMode(420), modTime: time.Unix(1581490842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x11\xb4\x52\xe6\x29\xef\x01\x8c\x22\x4d\xd4\xcc\x58\x96\x76\xb1\xb3\x3d\x14\xc5\x4c\x5b\xe7\x40\xab\x44\x5a\x24\xbd\xc6\x20\xf8\xbf\x0f\x14\x45\x9b\x96\x15\xcf\x59\xe7\x17\x5b\xd4\xf1\x7e\x7c\xf7\x7d\xe7\x23\x2b\xba\xf8\x4a\x9f\x10\x2a\x9e\x63\x49\x48\x51\xad\xb8\x50\x10\x93\x68\x90\x53\x45\xe7\x54\xe2\x85\xac\xcb\x01\x89\xb4\x2e\x96\x90\x8e\x9b\xf7\xd3\xa2\x42\x63\x06\xaa\xa8\x70\xa0\x35\xb2\xdc\x18\x92\x10\xad\xe1\x4c\xd1\x79\x89\x70\x39\x82\xd4\x18\x42\x2e\x2e\x40\xeb\xf4\x96\x4f\xed\xe9\x3d\xb5\x97\x40\xe0\x4a\xa0\x44\xa6\x24\x50\x10\xfc\x1b\x2c\x05\xaf\xe0\xad\xd6\x69\x60\xf5\x36\x25\x6a\xb3\xc2\xc3\xdb\x52\x89\xf5\x42\x81\xb6\xf9\xfc\x04\x82\xb2\x27\x84\xf4\x43\x81\x65\x2e\xc1\x18\x02\x00\x10\x69\x0d\xe9\x2d\xbf\xe6\xe5\xba\x62\xf6\x1a\x18\x03\x5a\xc3\xee\x70\x6a\x5d\x1b\x03\xb3\xbf\x24\x67\x97\x03\x6b\xbf\x67\x3d\x98\x41\x93\xb9\x3f\xbe\xe6\x55\x85\x4c\xf9\x00\x36\x32\xb2\xdc\x3e\xba\x1a\xc7\x4c\xa2\x50\xe0\xbf\x29\x08\x5c\x70\x91\x93\xe5\x9a\x2d\x20\xa6\x70\xde\x2d\x23\x69\x4d\xe3\x7c\x0e\xe7\xb2\x2e\xd3\x9b\xf7\x09\xa0\x10\x5c\xd8\xca\xfe\xa6\xc2\x3e\xb8\x03\x42\xa2\x05\x67\x52\x81\xac\x4b\xa9\x04\x8c\x60\x36\xbe\x9f\x64\x0f\x53\x18\xdf\x4f\x3f\x42\x93\x65\x08\x50\x3c\x83\x1f\x49\x14\xcd\xec\x0b\x59\x97\x8a\xf3\x12\x52\x50\x62\x8d\x30\x58\x5a\x9c\x06\xc6\xb4\x26\x09\xfc\x7e\x75\xf7\x98\x4d\x8e\xde\x79\x17\xd8\xcf\x08\x89\x04\xca\x75\xa9\x86\x4d\x82\x97\x23\xc8\xe7\x69\xf6\x8c\x8b\xd8\x65\x37\xec\xf3\xf0\xc4\x7d\xdc\x84\x44\xc5\xb2\xb9\xf9\xc3\x08\x58\x51\xda\x62\x23\x81\x6a\x2d\x98\x3d\x25\x91\xc7\xd7\x32\xed\x93\x28\x2a\x2a\x36\xbf\xe0\x26\x1d\xcb\xab\xb5\xe2\x63\xb6\x10\xb6\x0d\x6d\x17\x8a\x7c\x9b\x84\xcb\x29\xbd\xa3\x52\x39\x5c\xc7\x79\x7c\x62\x2c\x9a\x6a\x1d\x86\x0a\x79\x63\x0c\x8c\xa0\xff\xb5\x65\x90\x31\x71\x91\x27\x6d\xc6\x4e\x03\x3e\x00\x2b\x4a\xd2\x4f\xff\x1b\x2c\x51\x21\xb4\x5f\xf3\x0d\xac\x9c\x73\xf8\x8a\x9b\xcb\xd9\x7e\xb0\x30\x93\x99\x23\x53\xbf\xbb\x80\x46\x43\x78\xd9\xc7\xd1\x5a\x92\x86\x6d\x87\xec\xb3\xe5\x75\x09\x78\x93\xdd\x65\xd3\x0c\x3e\x3c\x7c\xfc\xd5\xd6\xbe\xc7\xbf\x3f\x7e\xce\x1e\xb2\x63\x49\x8c\xe0\xdd\xcc\xb9\xfd\xd3\x35\xf0\x80\x44\x2f\x5f\x76\x68\x77\xfb\xda\x88\x3e\x68\xad\x7d\x76\xdd\xdd\x6f\x47\x5f\x3f\xde\x6f\x8e\xf6\x1f\x60\x82\x25\x2e\x76\x9a\xfe\xfe\x96\x1d\x8f\xf8\xbf\xb4\x32\x3e\x18\x38\xc3\xa6\x9b\xc9\x09\xc3\x65\x92\xdd\x65\xd7\x53\x68\x25\xbf\x27\xe7\x25\x2d\x65\x30\x45\xbc\x4d\x2f\x0d\xda\x77\x27\xb2\x21\xa2\x56\xc6\xdd\xa4\xb5\x21\x24\xda\x32\xe4\xb7\x35\x8a\xcd\x03\xff\x16\x8c\x9a\x17\x69\x92\x4e\x16\x94\xc5\x7d\xc9\x9f\x36\x8c\x58\x51\x0e\xfd\x94\xd8\x8a\xfa\x0d\x1d\x06\xc2\x7e\x5c\xe5\x54\xa1\xff\xda\x1f\xf9\xfd\x33\xdf\x99\xfe\xb7\x91\xff\xf8\xe9\xe6\x6a\x9a\x75\x41\x9e\x64\xdb\x46\x81\xd6\xdd\xb9\x2b\x51\xed\x66\xf7\xa9\xba\x8c\x5e\x16\xa5\xac\xcb\xb5\xab\xb6\x8d\xd0\x60\x18\xe8\xce\x4a\x4c\x6b\xf7\x9f\x7c\x56\xc0\xf0\xac\x60\x39\x3e\x37\xcb\xc0\xd8\xfe\x42\xb9\xdd\x09\xdc\x9e\x70\x28\x0c\x77\x25\xbd\xe5\xcd\x05\x5f\xa6\x93\xe0\x7c\x03\xce\x21\xa3\x15\x5a\xe1\xb5\xc6\x81\xe9\x56\x72\xaf\xf1\x1f\x4a\x4e\x6b\x78\xe2\x2b\x2a\x68\x55\x16\x52\x41\x5b\x41\x53\xad\x5d\x18\x12\xcb\xa9\x62\x09\x8c\xfb\x77\xe9\x58\x3e\xb2\xa2\x6e\xd0\xf8\xfc\x45\xeb\x76\x31\x38\xdf\xee\x42\x61\x0e\x60\xcc\x10\xbc\x12\x9d\xa7\x43\x2f\xfd\x23\x37\x90\x25\xb4\x9f\xd9\xae\xe5\xed\xda\xd5\x27\xd0\xad\xb5\x97\x69\x9b\x56\x57\xac\x5b\x3b\x4f\x94\xda\xea\xcd\x23\x60\xa1\xdd\x9a\xb4\x62\xed\xc3\x58\x9b\x9d\xd9\x6e\x43\xe8\x91\x6e\x0f\xca\x4d\xf6\x81\x78\xfb\x8b\x0b\x05\xec\x23\xf5\xfd\x21\xf8\x4f\x57\xd1\xfe\x3c\x48\xf4\x50\xdf\xb6\x8f\x36\x5a\xbb\x6a\x9c\xd8\x90\xd7\x37\xe5\x35\x8d\x39\xde\x1c\x6f\x51\x0f\xbb\xb8\x87\xab\xd9\x4b\xa8\xc3\xf7\xa3\xe9\x7f\xe5\xb8\x44\x01\x75\x7a\x5d\x72\x89\x71\x12\xa2\x2c\x6d\x5a\x9f\xbf\xf4\x6b\xa3\xe1\x8e\xb7\x5d\x72\xeb\xe2\x1e\x9f\x55\x9c\x74\x32\x68\xc9\xd7\xaf\xae\x90\x7e\x9e\x82\x23\xa8\x5f\xcf\xa8\x7f\xc3\xe1\x18\x16\xfb\x78\xf8\xd2\x47\x40\x57\x2b\x64\x79\x2c\x50\x0e\xe1\x0d\x4d\x7a\xb0\x2b\x96\x50\xa7\x99\x10\x71\xf2\xfa\xa8\x87\x7c\x6e\x02\x39\x42\xfb\xfd\x74\xf7\xe3\x9f\x00\x00\x00\xff\xff\xa9\xff\xa7\x89\xf8\x0d\x00\x00")

func templatesStdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesStdTmpl,
		"templates/std.tmpl",
	)
}

func templatesStdTmpl() (*asset, error) {
	bytes, err := templatesStdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/std.tmpl", size: 3576, mode: os.FileMode(420), modTime: time.Unix(1581490846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStd_contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x11\xb4\x52\xa6\x29\xef\x01\x8c\x22\x4d\xd4\xcc\x58\x96\x76\xb1\xb3\x3d\x14\xc5\x4c\x4b\xe7\x40\xab\x44\x5a\x24\xbd\xc6\x20\xf8\xbf\x0f\x14\x45\x5b\xb6\x65\xc7\x41\x57\xbf\xc8\x92\x8e\xf7\xeb\xfb\xbe\xd3\x91\x05\xcd\xbe\xd2\x27\x84\x8a\xe7\x58\x12\x52\x54\x0b\x2e\x14\x84\x04\x00\x60\x90\x71\xa6\xf0\x59\x0d\x48\x30\xc8\xa9\xa2\x33\x2a\xf1\x42\xd6\xe5\x80\x04\x5a\x17\x73\x48\x46\x8d\xf5\xa4\xa8\xd0\x98\x81\x2a\x2a\x1c\x68\x8d\x2c\x37\x86\x44\x44\x6b\x38\x53\x74\x56\x22\x5c\x0e\x21\x31\x86\x90\x8b\x0b\xd0\x3a\xb9\xe5\x13\xfb\xf4\x9e\xda\x43\x20\x70\x21\x50\x22\x53\x12\x28\x08\xfe\x0d\xe6\x82\x57\xf0\x56\xeb\xa4\x63\xf5\x36\x21\x6a\xb5\xc0\xfd\xd3\x52\x89\x65\xa6\x40\xdb\x7c\x7e\x01\x41\xd9\x13\x42\xf2\xa1\xc0\x32\x97\x60\x4c\x53\x43\xa0\x35\x24\xb7\xfc\x9a\x97\xcb\x8a\xd9\x63\x60\x0c\x68\x0d\x9b\x87\x13\xeb\xda\x18\x98\xfe\x23\x39\xbb\x1c\x58\xfb\x2d\xeb\xc1\x14\x9a\xcc\xfd\xe3\x6b\x5e\x55\xc8\x94\x0f\x60\x23\x23\xcb\xed\xad\xab\x71\xc4\x24\x0a\x05\xfe\x4a\x41\x60\xc6\x45\x4e\xe6\x4b\x96\x41\x48\xe1\x7c\xb7\x8c\xa8\x35\x0d\x33\xf5\x0c\x6d\xcb\x93\x6b\x77\x8d\x21\x9f\xc1\xb9\xac\xcb\xe4\xe6\x7d\x04\x28\x04\x17\xb6\xdc\x7f\xa9\xb0\x37\xee\x01\x21\x41\xc6\x99\x54\x20\xeb\x52\x2a\x01\x43\x98\x8e\xee\xc7\xe9\xc3\x04\x46\xf7\x93\x8f\xd0\xa4\xde\xed\x5a\x38\x85\x9f\x49\x10\x4c\xed\x0b\x59\x97\x8a\xf3\x12\x12\x50\x62\x89\x30\x98\xdb\xe6\x0d\x8c\x69\x4d\x22\xf8\xf3\xea\xee\x31\x1d\x1f\x3d\xf3\xae\x63\x3f\x25\x24\x10\x28\x97\xa5\x8a\x9b\x04\x2f\x87\x90\xcf\x92\xf4\x19\xb3\xb6\x20\x5b\x64\xdc\x66\x1a\xf7\x79\x7b\xe2\x3e\x87\x88\x04\xc5\xbc\xf1\xf2\xd3\x10\x58\x51\xda\xc2\x03\x81\x6a\x29\x98\x7d\x4a\x02\x0f\x80\xa5\xe2\x27\x51\x54\x54\xac\x7e\xc3\x55\x32\x92\x57\x4b\xc5\x47\x2c\x13\x16\xa7\x16\xa6\x22\x5f\x27\xe4\xf2\x4b\xee\xa8\x54\xae\xf1\xa3\x3c\x3c\x31\x16\x4d\xb4\xee\x86\xea\x12\xcb\x18\x18\x42\xff\x6b\x4b\x31\x63\xc2\x22\x8f\xda\x8c\x9d\x48\x7c\x00\x56\x94\xa4\x5f\x1f\x37\x58\xa2\x42\x68\x2f\xb3\x15\x2c\x9c\x73\xf8\x8a\xab\xcb\xe9\x76\xb0\x6e\x26\x53\xc7\xb6\x7e\x77\x2f\xf1\x2c\x86\xc3\x8e\x8f\x16\x18\x35\x74\xdc\xa7\xa7\xad\x79\x97\xa1\x37\xe9\x5d\x3a\x49\xe1\xc3\xc3\xc7\xdf\x6d\x43\xb6\x08\xfa\xd7\xaf\xe9\x43\x7a\x2c\x89\x21\xbc\x9b\x3a\xb7\x7f\x3b\x54\x8f\xb2\xec\xb0\x23\x07\xc7\x2e\xf0\xcd\xd8\xe8\x60\x6f\xef\x1d\xfc\xdb\x78\xf5\x01\xf6\x7e\x75\x94\x20\x00\x63\x2c\x31\xdb\x4c\x85\xef\xc7\xf4\x78\xc4\x1f\x87\x75\xb8\x37\xc7\xe2\x06\xee\xe8\x84\xf1\x34\x4e\xef\xd2\xeb\x09\xb4\x43\x63\x6b\x08\xcc\x69\x29\x3b\x73\xc8\xdb\xf4\xf2\xa4\x7d\x77\x22\x5d\x02\x6a\xc5\xbf\x9b\xb4\x36\x84\x04\x6b\x0a\xfd\xb1\x44\xb1\x7a\xe0\xdf\x0e\x0c\xab\x83\x3c\x4a\xc6\x19\x65\x61\x5f\x21\xa7\x8d\x33\x56\x94\xb1\x9f\x33\xeb\xb1\xf0\x86\xc6\x9d\xd1\xf0\xb8\xc8\xa9\x42\x7f\xd9\xfe\xaa\xf4\x7f\x56\x9c\xe9\xff\xf8\x55\x79\xfc\x74\x73\x35\x49\x77\x51\x18\xa7\x6b\x24\x41\xeb\xdd\x71\x2e\x51\x6d\x3e\x0f\xa7\x2a\x3b\x38\x4d\xd6\xb2\x2e\x97\xae\x1d\x6d\xb4\xa6\xc9\x1d\xe5\x5a\x91\x6a\xed\xf6\x82\xb3\x02\xe2\xb3\x82\xe5\xf8\xdc\x2c\x24\x23\xfb\x0f\xe5\x7a\x2f\x71\xbb\xca\xbe\xb4\xdc\x91\xe4\x96\x37\x07\x7c\xc9\x4e\xc4\xb3\x15\x38\x87\x8c\x56\x68\xa5\xdb\x1a\x77\x4c\xd7\xa2\x7d\x8d\xff\x17\x45\xab\x35\x3c\xf1\x05\x15\xb4\x2a\x0b\xa9\xa0\x2d\xab\x69\x81\xdd\x64\x22\xcb\xc4\x62\x0e\x8c\xfb\x77\xc9\x48\x3e\xb2\xa2\x6e\x5a\xf4\xf9\x8b\xd6\xed\xc6\x72\xbe\x5e\xd2\xba\x89\x81\x31\x31\x78\x2d\x3b\x4f\xfb\x5e\xfa\xa7\x7a\x47\xd8\xd0\xfe\xa6\x1b\x4e\xb4\xfb\x60\x9f\xc4\xd7\xd6\x5e\xe8\x6d\x5a\xbb\x72\x5f\xdb\x79\x26\xd5\x56\xb1\xbe\x03\xb6\xdf\x6b\x93\x56\xee\x7d\x8d\xd7\x66\x63\xb6\xd9\x52\x5e\x10\x7f\x4f\xc7\x9b\x4a\x3a\xf2\xef\x2f\xb4\x3b\x02\x7c\xd4\xbe\x6f\x8e\xff\xed\xce\x04\xff\xbc\x93\xf4\xfe\x84\xb0\x98\xda\x68\xed\xba\x73\x22\x38\xaf\x07\xe8\x35\x20\x1d\x07\xca\x5b\xd4\xf1\x2e\x06\x87\x56\xc5\x43\x08\xc0\xf7\x77\xd6\xff\xcb\x71\x8e\x02\xea\xe4\xba\xe4\x12\xc3\xa8\xdb\x71\x69\x53\xfc\xfc\xa5\x5f\x33\x0d\xa7\xbc\xed\x9c\x5b\x17\xf7\xb6\x84\x68\x27\x83\x96\x94\xfd\xaa\xeb\xd2\xd2\x53\x73\x08\xf5\xeb\xd9\xf5\x52\x1f\x8e\xf5\x62\xbb\x1f\xbe\xf4\x21\xd0\xc5\x02\x59\x1e\x0a\x94\x31\xbc\xa1\x51\x4f\xef\x8a\x39\xd4\x49\x2a\x44\x18\xbd\x3e\xea\x3e\xb7\x9b\x40\x8e\xdc\x7e\x5f\xde\xfc\xf9\x2f\x00\x00\xff\xff\x76\x88\xd3\xf5\xb7\x0e\x00\x00")

func templatesStd_contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesStd_contextTmpl,
		"templates/std_context.tmpl",
	)
}

func templatesStd_contextTmpl() (*asset, error) {
	bytes, err := templatesStd_contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/std_context.tmpl", size: 3767, mode: os.FileMode(420), modTime: time.Unix(1581490845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bilibili.tmpl": templatesBilibiliTmpl,
	"templates/std.tmpl": templatesStdTmpl,
	"templates/std_context.tmpl": templatesStd_contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bilibili.tmpl": &bintree{templatesBilibiliTmpl, map[string]*bintree{}},
		"std.tmpl": &bintree{templatesStdTmpl, map[string]*bintree{}},
		"std_context.tmpl": &bintree{templatesStd_contextTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

