// Code generated by go-bindata.
// sources:
// templates/table_bilibili.tmpl
// templates/table_std.tmpl
// templates/table_std_context.tmpl
// DO NOT EDIT!

package mytable

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTable_bilibiliTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x11\xb4\x52\xa6\x2a\xef\x01\x8c\x22\x4d\xd4\xcc\x58\x96\x76\xb1\xb3\x3d\x14\xc5\x4c\x4b\xe7\x40\xab\x44\x5a\x24\xbd\xc6\x20\xf8\xbf\x0f\x94\x44\x59\x96\x15\xc7\x46\x37\xbf\xc8\xa2\x8e\xf7\xe3\xbb\xef\x3b\x92\xac\x68\xf2\x8d\x3e\x21\x14\x3c\xc5\x9c\x90\xac\x58\x71\xa1\xc0\x27\x00\x00\xa3\x84\x33\x85\xcf\x6a\x44\xbc\xd1\x13\x7f\x97\xf0\xa2\xe0\xec\x22\xcf\x16\x82\x8a\xcd\x45\x4a\x15\x5d\x50\x89\x17\xb2\xcc\xad\x85\xca\x0a\x1c\x91\x80\x68\x0d\x67\x8a\x2e\x72\x84\xcb\x31\x44\xc6\x10\x72\x71\x01\x5a\x47\xb7\x7c\x66\x57\xef\x69\x81\xc6\x80\xc0\x95\x40\x89\x4c\x49\xa0\x20\xf8\x77\x58\x0a\x5e\xc0\x5b\xad\xa3\x8e\xd5\xdb\x88\xa8\xcd\x0a\xf7\x77\x4b\x25\xd6\x89\x02\x4d\x3c\xad\xdf\x81\xa0\xec\x09\x21\xfa\x98\x61\x9e\x4a\x30\xa6\x4a\xde\xd3\x1a\xa2\x5b\x7e\xcd\xf3\x75\xc1\xec\x36\x30\x06\xb4\x86\xed\xe2\xcc\xba\x36\x06\xe6\x7f\x4b\xce\x2e\x47\xd6\x7e\xc7\x7a\x34\x87\x2a\x73\xb7\x7c\xcd\x8b\x02\x99\x72\x01\x6c\x64\x64\xa9\x7d\xad\x6b\x9c\x30\x89\x42\x81\x7b\x52\x10\x98\x70\x91\x92\xe5\x9a\x25\xe0\x53\x38\xef\x97\x11\x34\xa6\x7e\xa2\x9e\xa1\xc1\x3a\xba\xae\x9f\x21\xa4\x0b\x38\x97\x65\x1e\xdd\x7c\x08\x00\x85\xe0\xc2\x96\xfb\x0f\x15\xf6\xa5\x5e\x20\xc4\x4b\x38\x93\x0a\x64\x99\x4b\x25\x60\x0c\xf3\xc9\xfd\x34\x7e\x98\xc1\xe4\x7e\xf6\x09\xaa\xd4\xbb\xa8\xf9\x73\xf8\x99\x78\xde\xdc\x7e\x90\x65\xae\x38\xcf\x21\x02\x25\xd6\x08\xa3\xa5\x05\x6f\x64\x4c\x63\x12\xc0\x1f\x57\x77\x8f\xf1\xf4\xe0\x9e\xf7\x1d\xfb\x39\x21\x9e\x40\xb9\xce\x55\x58\x25\x78\x39\x86\x74\x11\xc5\xcf\x98\xd8\xea\xc2\x26\xc5\x70\xc8\xcd\x13\x77\xc1\x03\xe2\x65\xcb\x6a\xfb\x4f\x63\x60\x59\x6e\x2b\xf6\x04\xaa\xb5\x60\x76\x95\x78\x0e\xf9\x6c\x09\xd1\x67\x91\x15\x54\x6c\x7e\xc5\x4d\x34\x91\x57\x6b\xc5\x27\x2c\x11\xb6\x41\x4d\x7f\xb2\xb4\xcd\xa4\x4e\x2c\xba\xa3\x52\xd5\x88\x4f\x52\xff\xc8\x58\x34\xd2\xba\x1b\xaa\xcb\x28\x63\x60\x0c\xc3\x9f\x2d\xb7\x8c\xf1\xb3\x34\x68\x32\x46\x96\x1a\x43\x5c\x00\x96\xe5\x64\x58\x18\x37\x98\xa3\x42\x68\x1e\x8b\x0d\xac\x6a\xe7\xf0\x0d\x37\x97\xf3\xdd\x60\xdd\x4c\xe6\x35\xcd\x86\xdd\xbd\x46\xb0\x10\x5e\x76\x7c\xb0\xc0\xa0\xe2\xe1\x3e\x2f\x6d\xcd\x7d\x6a\xde\xc4\x77\xf1\x2c\x86\x8f\x0f\x9f\x7e\xb3\x80\xec\x30\xf3\xcf\x5f\xe2\x87\xf8\x50\x12\x63\x78\x3f\xaf\xdd\xfe\x55\x77\x75\x98\x5e\x2f\x7b\xa8\xfb\xd0\xef\x78\x35\x28\x3a\x4d\xb7\xef\x75\xdf\x77\x1b\x35\xd4\xa9\x0f\x9b\x83\xcc\x00\x98\x62\x8e\xc9\x76\x0e\xfc\x78\x33\x0f\x47\xfc\xff\x9a\xec\xef\x4d\xae\xb0\xea\x73\x70\xc4\x40\x9a\xc6\x77\xf1\xf5\x0c\x9a\x31\xb1\xa3\xfe\x25\xcd\x65\x67\xf2\x38\x9b\x41\x82\x34\xdf\x8e\xe4\x89\x47\xad\xea\xfb\x49\x6b\x43\x88\xd7\x72\xe7\xf7\x35\x8a\xcd\x03\xff\xde\x1f\x4f\x2f\x12\x28\x9a\x26\x94\xf9\x43\x15\x1c\x37\xc0\x58\x96\x87\x6e\xb2\xb4\x83\xe0\x0d\x0d\x3b\xc3\xe0\x71\x95\x52\x85\xee\xb1\x7b\x80\x0c\x9f\x20\xb5\xe9\x7f\x78\x80\x3c\x7e\xbe\xb9\x9a\xc5\x7d\xf8\xa7\x71\xdb\x42\xd0\xba\x3f\xc0\x25\xaa\xed\x49\x70\xac\x96\xbd\x57\x84\x2c\xcb\x7c\x5d\xe3\xd0\x84\xa9\xd0\xed\x68\xd5\xca\x52\xeb\xfa\xec\x3f\xcb\x20\x3c\xcb\x58\x8a\xcf\xd5\xa5\x63\x62\xff\xa1\x6c\xef\x1e\xf5\x7d\x64\x5f\x4c\xf5\x96\xe8\x96\x57\x1b\x5c\xad\xb5\x6c\x17\x1b\xa8\x1d\x32\x5a\xa0\x15\x6b\x63\xdc\x31\x6d\x65\x7a\x8a\xff\x57\x65\xaa\x35\x3c\xf1\x15\x15\xb4\xc8\x33\xa9\xa0\x29\xab\x82\xc0\xde\x56\x02\x4b\xc1\x6c\x09\x8c\xbb\x6f\xd1\x44\x3e\xb2\xac\xac\x20\xfa\xf2\x55\xeb\xe6\x56\x72\xde\x5e\xc4\xba\x89\x81\x31\x21\x38\xf5\xd6\x9e\xf6\xbd\x0c\x0f\xf0\x8e\x94\xa1\xf9\xcd\xb7\x64\x68\xee\x7c\x43\xa2\x6e\xad\x9d\xb4\x9b\xb4\xfa\x02\x6f\xed\x1c\x85\x4a\xab\x51\x87\x80\xc5\xbb\x35\x69\x04\x3e\x04\xbc\x36\x5b\xb3\xed\x4d\xe4\x25\xb9\x0f\x40\x5d\x95\xd0\x11\xfc\x70\x85\x5d\xd1\xbb\x70\x43\xc7\x8b\xfb\xf5\xa7\x80\x5b\xef\x64\xbb\x3f\x13\x6c\x33\x6d\xb4\xe6\x4a\x73\x64\x57\x4e\xef\xcc\x29\xdd\x39\xdc\x21\x67\x51\x86\x7d\xf0\xf7\xee\x81\x2f\x41\x0f\x3f\x0e\xa9\xfb\x97\xe2\x12\x05\x94\xd1\x75\xce\x25\xfa\x41\x17\x6a\x69\x73\xfb\xf2\x75\x58\x25\x15\x8b\x9c\xed\x92\x5b\x17\xf7\xf8\xac\xfc\xa0\x97\x41\x43\xc3\x61\x9d\x75\x89\xe8\xc8\x38\x86\xf2\x74\x5a\xbd\x86\xc3\x21\x2c\x76\xf1\x70\xa5\x8f\x81\xae\x56\xc8\x52\x5f\xa0\x0c\xe1\x0d\x0d\x06\xb0\xcb\x96\x50\x46\xb1\x10\x7e\x70\x7a\xd4\x7d\x52\x57\x81\x6a\x56\xbb\xcb\xf0\xf6\xcf\xbf\x01\x00\x00\xff\xff\xc6\x9e\xd0\x48\x86\x0e\x00\x00")

func templatesTable_bilibiliTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTable_bilibiliTmpl,
		"templates/table_bilibili.tmpl",
	)
}

func templatesTable_bilibiliTmpl() (*asset, error) {
	bytes, err := templatesTable_bilibiliTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table_bilibili.tmpl", size: 3718, mode: os.FileMode(420), modTime: time.Unix(1581488564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTable_stdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x11\xb4\x52\xe6\x29\xef\x01\x8c\x22\x4d\xd4\xcc\x58\x96\x76\xb1\xb3\x3d\x14\xc5\x4c\x5b\xe7\x40\xab\x44\x5a\x24\xbd\xc6\x20\xf8\xbf\x0f\x14\x45\x9b\x96\x15\xcf\x59\xe7\x17\x5b\xd4\xf1\x7e\x7c\xf7\x7d\xe7\x23\x2b\xba\xf8\x4a\x9f\x10\x2a\x9e\x63\x49\x48\x51\xad\xb8\x50\x10\x93\x68\x90\x53\x45\xe7\x54\xe2\x85\xac\xcb\x01\x89\x06\xaa\xa8\x70\x40\x12\xa2\x35\x9c\x29\x3a\x2f\x11\x2e\x47\x90\x1a\x43\xc8\xc5\x05\x68\x9d\xde\xf2\xa9\x3d\xbd\xa7\x15\x1a\x03\x02\x57\x02\x25\x32\x25\x81\x82\xe0\xdf\x60\x29\x78\x05\x6f\xb5\x4e\x03\xab\xb7\x29\x51\x9b\x15\x1e\xde\x96\x4a\xac\x17\x0a\x34\x89\xb4\xfe\x09\x04\x65\x4f\x08\xe9\x87\x02\xcb\x5c\x82\x31\x04\x00\x20\xd2\x1a\xd2\x5b\x7e\xcd\xcb\x75\xc5\xec\x35\x30\x06\xb4\x86\xdd\xe1\xd4\xba\x36\x06\x66\x7f\x49\xce\x2e\x07\xd6\x7e\xcf\x7a\x30\x83\x26\x73\x7f\x7c\xcd\xab\x0a\x99\xf2\x01\x6c\x64\x64\xb9\x7d\x74\x35\x8e\x99\x44\xa1\xc0\x7f\x53\x10\xb8\xe0\x22\x27\xcb\x35\x5b\x40\x4c\xe1\xbc\x5b\x46\xd2\x9a\xc6\xf9\x1c\xce\x65\x5d\xa6\x37\xef\x13\x40\x21\xb8\xb0\x95\xfd\x4d\x85\x7d\x70\x07\x84\x44\x0b\xce\xa4\x02\x59\x97\x52\x09\x18\xc1\x6c\x7c\x3f\xc9\x1e\xa6\x30\xbe\x9f\x7e\x84\x26\xcb\x10\xa0\x78\x06\x3f\x92\x28\x9a\xd9\x17\xb2\x2e\x15\xe7\x25\xa4\xa0\xc4\x1a\x61\xb0\xb4\x38\x0d\x8c\x69\x4d\x12\xf8\xfd\xea\xee\x31\x9b\x1c\xbd\xf3\x2e\xb0\x9f\x11\x12\x09\x94\xeb\x52\x0d\x9b\x04\x2f\x47\x90\xcf\xd3\xec\x19\x17\xb1\xcb\x6e\xd8\xe7\xe1\x89\xfb\xb8\x09\x89\x8a\x65\x73\xf3\x87\x11\xb0\xa2\xb4\xc5\x46\x02\xd5\x5a\x30\x7b\x4a\x22\x8f\x6f\xb1\x84\xf4\x93\x28\x2a\x2a\x36\xbf\xe0\x26\x1d\xcb\xab\xb5\xe2\x63\xb6\x10\xb6\x0d\x6d\x17\x8a\x7c\x9b\x84\xcb\x29\xbd\xa3\x52\x39\x5c\xc7\x79\x7c\x62\x2c\x9a\x6a\x1d\x86\x0a\x79\x63\x0c\x8c\xa0\xff\xb5\x65\x90\x31\x71\x91\x27\x6d\xc6\xc8\x72\x63\x88\x0f\xc0\x8a\x92\xf4\xd3\xff\x06\x4b\x54\x08\xed\xd7\x7c\x03\x2b\xe7\x1c\xbe\xe2\xe6\x72\xb6\x1f\x2c\xcc\x64\xe6\xc8\xd4\xef\x2e\xa0\xd1\x10\x5e\xf6\x71\xb4\x96\xa4\x61\xdb\x21\xfb\x6c\x79\x5d\x02\xde\x64\x77\xd9\x34\x83\x0f\x0f\x1f\x7f\xb5\xb5\xef\xf1\xef\x8f\x9f\xb3\x87\xec\x58\x12\x23\x78\x37\x73\x6e\xff\x74\x0d\x3c\x20\xd1\xcb\x97\x1d\xda\xdd\xbe\x36\xa2\x0f\x5a\x6b\x9f\x5d\x77\xf7\xdb\xd1\xd7\x8f\xf7\x9b\xa3\xfd\x07\x98\x60\x89\x8b\x9d\xa6\xbf\xbf\x65\xc7\x23\xfe\x2f\xad\x8c\x0f\x06\xce\xb0\xe9\x66\x72\xc2\x70\x99\x64\x77\xd9\xf5\x14\x5a\xc9\xef\xc9\x79\x49\x4b\x19\x4c\x11\x6f\xd3\x4b\x83\xf6\xdd\x89\x6c\x88\xa8\x95\x71\x37\x69\x6d\x08\x89\xb6\x0c\xf9\x6d\x8d\x62\xf3\xc0\xbf\x05\xa3\xe6\x45\x9a\xa4\x93\x05\x65\x71\x5f\xf2\xa7\x0d\x23\x56\x94\x43\x3f\x25\xb6\xa2\x7e\x43\x87\x81\xb0\x1f\x57\x39\x55\xe8\xbf\xf6\x47\x7e\xff\xcc\x77\xa6\xff\x6d\xe4\x3f\x7e\xba\xb9\x9a\x66\x5d\x90\x27\xd9\xb6\x51\xa0\x75\x77\xee\x4a\x54\xbb\xd9\x7d\xaa\x2e\xa3\x97\x45\x29\xeb\x72\xed\xaa\x6d\x23\x34\x18\x06\xba\xb3\x12\xd3\xda\xfd\x27\x9f\x15\x30\x3c\x2b\x58\x8e\xcf\xcd\x32\x30\xb6\xbf\x50\x6e\x77\x02\xb7\x27\x1c\x0a\xc3\x5d\x49\x6f\x79\x73\xc1\x97\xe9\x24\x38\xdf\x80\x73\xc8\x68\x85\x56\x78\xad\x71\x60\xba\x95\xdc\x6b\xfc\x87\x92\xd3\x1a\x9e\xf8\x8a\x0a\x5a\x95\x85\x54\xd0\x56\xd0\x54\x6b\x17\x86\xc4\x72\xaa\x58\x02\xe3\xfe\x5d\x3a\x96\x8f\xac\xa8\x1b\x34\x3e\x7f\xd1\xba\x5d\x0c\xce\xb7\xbb\x50\x98\x03\x18\x33\x04\xaf\x44\xe7\xe9\xd0\x4b\xff\xc8\x0d\x64\x09\xed\x67\xb6\x6b\x79\xbb\x76\xf5\x09\x74\x6b\xed\x65\xda\xa6\xd5\x15\xeb\xd6\xce\x13\xa5\xb6\x7a\xf3\x08\x58\x68\xb7\x26\xad\x58\xfb\x30\xd6\x66\x67\xb6\xdb\x10\x7a\xa4\xdb\x83\x72\x93\x7d\x20\xde\xfe\xe2\x42\x01\xfb\x48\x7d\x7f\x08\xfe\xd3\x55\xb4\x3f\x0f\x12\x3d\xd4\xb7\xed\xa3\x8d\xd6\xae\x1a\x27\x36\xe4\xf5\x4d\x79\x4d\x63\x8e\x37\xc7\x5b\xd4\xc3\x2e\xee\xe1\x6a\xf6\x12\xea\xf0\xfd\x68\xfa\x5f\x39\x2e\x51\x40\x9d\x5e\x97\x5c\x62\x9c\x84\x28\x4b\x9b\xd6\xe7\x2f\xfd\xda\x68\xb8\xe3\x6d\x97\xdc\xba\xb8\xc7\x67\x15\x27\x9d\x0c\x5a\xf2\xf5\xab\x2b\xa4\x9f\xa7\xe0\x08\xea\xd7\x33\xea\xdf\x70\x38\x86\xc5\x3e\x1e\xbe\xf4\x11\xd0\xd5\x0a\x59\x1e\x0b\x94\x43\x78\x43\x93\x1e\xec\x8a\x25\xd4\x69\x26\x44\x9c\xbc\x3e\xea\x21\x9f\x9b\x40\x8e\xd0\x7e\x3f\xdd\xfd\xf8\x27\x00\x00\xff\xff\xf4\x88\x9f\xb1\xdf\x0d\x00\x00")

func templatesTable_stdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTable_stdTmpl,
		"templates/table_std.tmpl",
	)
}

func templatesTable_stdTmpl() (*asset, error) {
	bytes, err := templatesTable_stdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table_std.tmpl", size: 3551, mode: os.FileMode(420), modTime: time.Unix(1581488564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTable_std_contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x11\xb4\x52\xa6\x29\xef\x01\x8c\x22\x4d\xd4\xcc\x58\x96\x76\xb1\xb3\x3d\x14\xc5\x4c\x4b\xe7\x40\xab\x44\x5a\x24\xbd\xc6\x20\xf8\xbf\x0f\x94\x48\x5b\xb6\x65\xc7\x41\x57\xbf\xc8\xa2\x4e\xf7\xeb\xfb\xbe\xd3\x91\x05\xcd\xbe\xd2\x27\x84\x8a\xe7\x58\x12\x52\x54\x0b\x2e\x14\x84\x04\x00\x60\x90\x71\xa6\xf0\x59\x0d\x48\x30\xc8\xa9\xa2\x33\x2a\xf1\x42\xd6\xa5\xbd\x57\x45\x85\x03\x12\x11\xad\xe1\x4c\xd1\x59\x89\x70\x39\x84\xc4\x18\x42\x2e\x2e\x40\xeb\xe4\x96\x4f\xec\xe9\x3d\xad\xd0\x18\x10\xb8\x10\x28\x91\x29\x09\x14\x04\xff\x06\x73\xc1\x2b\x78\xab\x75\xd2\xb1\x7a\x9b\x10\xb5\x5a\xe0\xfe\xdb\x52\x89\x65\xa6\x40\x93\x40\xeb\x5f\x40\x50\xf6\x84\x90\x7c\x28\xb0\xcc\x25\x18\xd3\xa4\x1a\x68\x0d\xc9\x2d\xbf\xe6\xe5\xb2\x62\xf6\x35\x30\x06\xb4\x86\xcd\xe1\xc4\xba\x36\x06\xa6\xff\x48\xce\x2e\x07\xd6\x7e\xcb\x7a\x30\x85\x26\x73\x7f\x7c\xcd\xab\x0a\x99\xf2\x01\x6c\x64\x64\xb9\xbd\x6d\x6b\x1c\x31\x89\x42\x81\xbf\x52\x10\x98\x71\x91\x93\xf9\x92\x65\x10\x52\x38\xdf\x2d\x23\x72\xa6\x61\xa6\x9e\xc1\x75\x36\xb9\x6e\xaf\x31\xe4\x33\x38\x97\x75\x99\xdc\xbc\x8f\x00\x85\xe0\xc2\x96\xfb\x2f\x15\xf6\xa6\x3d\x20\x24\xc8\x38\x93\x0a\x64\x5d\x4a\x25\x60\x08\xd3\xd1\xfd\x38\x7d\x98\xc0\xe8\x7e\xf2\x11\x9a\xd4\xbb\x5d\x0b\xa7\xf0\x33\x09\x82\xa9\x7d\x20\xeb\x52\x71\x5e\x42\x02\x4a\x2c\x11\x06\x73\xdb\xbc\x81\x31\xce\x24\x82\x3f\xaf\xee\x1e\xd3\xf1\xd1\x77\xde\x75\xec\xa7\x84\x04\x02\xe5\xb2\x54\x71\x93\xe0\xe5\x10\xf2\x59\x92\x3e\x63\xe6\x0a\xb2\x45\xc6\x2e\xd3\xb8\xcf\xdb\x13\xf7\x39\x44\x24\x28\xe6\x8d\x97\x9f\x86\xc0\x8a\xd2\x16\x1e\x08\x54\x4b\xc1\xec\x29\x09\x3c\x00\xc5\x1c\x92\x4f\xa2\xa8\xa8\x58\xfd\x86\xab\x64\x24\xaf\x96\x8a\x8f\x58\x26\x2c\x4e\x0e\xa6\x22\x5f\x27\xd4\xe6\x97\xdc\x51\xa9\xda\xc6\x8f\xf2\xf0\xc4\x58\x34\xd1\xba\x1b\xaa\x4b\x2c\x63\x60\x08\xfd\x8f\x2d\xc5\x8c\x09\x8b\x3c\x72\x19\x23\xcb\x8d\x21\x3e\x00\x2b\x4a\xd2\xaf\x8f\x1b\x2c\x51\x21\xb8\xcb\x6c\x05\x8b\xd6\x39\x7c\xc5\xd5\xe5\x74\x3b\x58\x37\x93\x69\xcb\xb6\x7e\x77\x2f\xf1\x2c\x86\xc3\x8e\x8f\x16\x18\x35\x74\xdc\xa7\xa7\xad\x79\x97\xa1\x37\xe9\x5d\x3a\x49\xe1\xc3\xc3\xc7\xdf\x6d\x43\xb6\x08\xfa\xd7\xaf\xe9\x43\x7a\x2c\x89\x21\xbc\x9b\xb6\x6e\xff\x6e\x51\x3d\xca\xb2\xc3\x8e\x5a\x38\x76\x81\x6f\xc6\x46\x07\x7b\x7b\xdf\xc2\xbf\x8d\x57\x1f\x60\xef\x57\x47\x09\x02\x30\xc6\x12\xb3\xcd\x54\xf8\x7e\x4c\x8f\x47\xfc\x71\x58\x87\x7b\x73\x2c\x6e\xe0\x8e\x4e\x18\x4f\xe3\xf4\x2e\xbd\x9e\x80\x1b\x1a\x5b\x43\x60\x4e\x4b\xd9\x99\x43\xde\xa6\x97\x27\xee\xd9\x89\x74\x09\xa8\x15\xff\x6e\xd2\xda\x10\x12\xac\x29\xf4\xc7\x12\xc5\xea\x81\x7f\x3b\x30\xac\x0e\xf2\x28\x19\x67\x94\x85\x7d\x85\x9c\x36\xce\x58\x51\xc6\x7e\xce\xac\xc7\xc2\x1b\x1a\x77\x46\xc3\xe3\x22\xa7\x0a\xfd\x65\xfb\xab\xd2\xff\x59\x69\x4d\xff\xc7\xaf\xca\xe3\xa7\x9b\xab\x49\xba\x8b\xc2\x38\x5d\x23\x09\x5a\xef\x8e\x73\x89\x6a\xf3\x79\x38\x55\xd9\xc1\x69\xb2\x96\x75\xb9\x6c\xdb\xe1\xa2\x35\x4d\xee\x28\xd7\x8a\x54\xeb\x76\x2f\x38\x2b\x20\x3e\x2b\x58\x8e\xcf\xcd\x42\x32\xb2\xff\x50\xae\xf7\x92\x76\x57\xd9\x97\x56\xfb\x4a\x72\xcb\x9b\x17\x7c\xc9\xad\x88\x67\x2b\x68\x1d\x32\x5a\xa1\x95\xae\x33\xee\x98\xae\x45\xfb\x1a\xff\x2f\x8a\x56\x6b\x78\xe2\x0b\x2a\x68\x55\x16\x52\x81\x2b\xab\x69\x81\xdd\x64\x22\xcb\xc4\x62\x0e\x8c\xfb\x67\xc9\x48\x3e\xb2\xa2\x6e\x5a\xf4\xf9\x8b\xd6\x6e\x63\x39\x5f\x2f\x69\xdd\xc4\xc0\x98\x18\xbc\x96\x5b\x4f\xfb\x5e\xfa\xa7\x7a\x47\xd8\xe0\x7e\xd3\x0d\x27\xdc\x3e\xd8\x27\xf1\xb5\xb5\x17\xba\x4b\x6b\x57\xee\x6b\x3b\xcf\xa4\xda\x2a\xd6\x77\xc0\xf6\x7b\x6d\xe2\xe4\xde\xd7\x78\x6d\x36\x66\x9b\x2d\xe5\x05\xf1\xf7\x74\xbc\xa9\xa4\x23\xff\xfe\x42\xbb\x23\xc0\x47\xed\xfb\xe6\xf8\xdf\xee\x4c\xf0\xe7\x9d\xa4\xf7\x27\x84\xc5\xd4\x46\x73\xeb\xce\x89\xe0\xbc\x1e\xa0\xd7\x80\x74\x1c\x28\x6f\x51\xc7\xbb\x18\x1c\x5a\x15\x0f\x21\x00\xdf\xdf\x59\xff\x2f\xc7\x39\x0a\xa8\x93\xeb\x92\x4b\x0c\xa3\x6e\xc7\xa5\x4d\xf1\xf3\x97\x7e\xcd\x34\x9c\xf2\xb6\x73\x6e\x5d\xdc\xdb\x12\xa2\x9d\x0c\x1c\x29\xfb\x55\xd7\xa5\xa5\xa7\xe6\x10\xea\xd7\xb3\xeb\xa5\x3e\x1c\xeb\xc5\x76\x3f\x7c\xe9\x43\xa0\x8b\x05\xb2\x3c\x14\x28\x63\x78\x43\xa3\x9e\xde\x15\x73\xa8\x93\x54\x88\x30\x7a\x7d\xd4\x7d\x6e\x37\x81\x5a\x72\xfb\x7d\x79\xf3\xe7\xbf\x00\x00\x00\xff\xff\x92\xc1\xd1\x55\x9e\x0e\x00\x00")

func templatesTable_std_contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTable_std_contextTmpl,
		"templates/table_std_context.tmpl",
	)
}

func templatesTable_std_contextTmpl() (*asset, error) {
	bytes, err := templatesTable_std_contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/table_std_context.tmpl", size: 3742, mode: os.FileMode(420), modTime: time.Unix(1581488564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/table_bilibili.tmpl": templatesTable_bilibiliTmpl,
	"templates/table_std.tmpl": templatesTable_stdTmpl,
	"templates/table_std_context.tmpl": templatesTable_std_contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"table_bilibili.tmpl": &bintree{templatesTable_bilibiliTmpl, map[string]*bintree{}},
		"table_std.tmpl": &bintree{templatesTable_stdTmpl, map[string]*bintree{}},
		"table_std_context.tmpl": &bintree{templatesTable_std_contextTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

