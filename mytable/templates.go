// Code generated by go-bindata.
// sources:
// templates/default.tmpl
// DO NOT EDIT!

package mytable

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdf\x6f\xdb\xb6\x13\x7f\x96\xfe\x8a\xfb\x0a\x5f\xa4\x52\xab\xd1\x1d\x30\xec\x21\x9b\x51\xa4\x89\xdb\x65\xcb\x92\x2e\x76\xd6\x87\xa2\x80\x69\x89\x72\xd4\xca\xa4\x4d\x51\x75\x0d\x41\xff\xfb\x70\x24\x65\x4b\xb2\x1c\xbb\x5b\xf3\x10\x5b\x47\xde\x8f\xcf\xdd\x87\xc7\x93\xdd\x25\x8d\x3e\xd3\x39\x83\xb2\x24\xef\xcc\xd7\x5b\xba\x60\x55\xe5\xba\xe9\x62\x29\xa4\x02\xdf\x05\x00\xf0\x66\x1b\xc5\x72\xcf\x75\xbc\x48\x70\xc5\xbe\x2a\xfc\xca\xa4\x14\x52\x0b\x73\x25\x53\x3e\xc7\xaf\x65\x99\x26\x40\xae\xb5\xee\x24\x45\x4b\x9e\x4a\x17\xcc\x2b\x4b\xc6\xe3\xaa\x32\xc6\xe6\xa9\x7a\x2c\x66\x24\x12\x8b\xc1\xa3\xe0\xf3\xfc\x91\xf1\xf9\xa7\x94\x0d\x22\x59\xc4\x9e\xe3\x06\x6e\x59\xc2\xff\x15\x9d\x65\x0c\xce\x87\x40\x30\x9a\xc1\x00\x43\x7c\x2b\x26\x28\x35\x21\x82\x64\x4b\xc9\x72\xc6\x55\x0e\x14\xa4\x58\x43\x22\xc5\x02\x9e\x95\x25\x69\xec\x7a\x46\x5c\xb5\x59\xb2\x7d\xed\x5c\xc9\x22\x52\x50\x62\xcc\x3f\x80\xa4\x7c\xce\x80\xbc\x49\x59\x16\xe7\x60\x03\x75\xca\x12\xc8\x5b\x71\x29\xb2\x62\xc1\x51\x0d\xaa\x0a\xca\x12\x76\xc2\x09\x9a\xae\x2a\x98\x7e\xca\x05\x3f\xf7\x70\x7f\x6b\xb7\x37\x05\x1d\x79\x2d\xbe\x14\x8b\x05\xe3\xaa\x76\x80\x9e\x19\x8f\xf1\xb1\x72\xdd\x48\xf0\xbc\x4e\xb8\x41\x3f\x04\x6f\xda\x86\x33\xf5\xf4\x72\x62\xe2\x1c\x82\x57\x96\xf9\x2a\x53\x42\x64\x40\x20\xa1\x59\xce\xc0\xd3\x8b\x5e\x55\x79\x5b\x1f\xbd\xe8\xf0\x6f\x30\x38\x00\xb1\x3f\xde\xde\x84\x98\x20\x3b\xc0\xa7\x1e\x74\x11\x06\xae\x2e\xe3\x35\xcf\x99\x54\x50\x7f\x52\x90\x2c\x12\x32\x76\x93\x82\x47\x56\xe8\x47\xea\x2b\x58\xa2\x91\x4b\xf3\x19\x42\x3c\x03\x24\x08\xb9\x7a\x1d\x02\x85\xe7\x7b\x05\x0d\x40\x13\x12\x2b\x6a\x32\x99\xaf\xb2\x5c\x49\x8c\xef\xfa\x76\x3c\xba\x9f\xc0\xf5\xed\xe4\x0e\xa0\x9b\x51\xf0\x3d\x78\xe1\x3a\x8e\x87\xb8\x77\xc9\x54\xb2\x68\xe6\x52\x6f\x99\x06\xf0\xf7\xc5\xcd\xc3\x68\x0c\xfe\xd4\x08\xfa\x74\x5e\x79\x68\xd5\xec\x9f\xba\xae\x23\x59\x5e\x64\x2a\xc4\xf0\x90\xcf\xf1\x8c\x8c\xbe\xb2\xc8\xe2\x42\xac\xa1\x0d\x35\xec\xb3\x36\x17\x75\x0c\x81\xeb\xa4\x89\xb6\xf2\xbf\x21\xf0\x34\x43\xa4\x8e\x64\xaa\x90\x1c\xa5\xae\x53\x93\x0a\x8f\xe0\x3b\x99\x2e\xa8\xdc\xfc\xc1\x36\xe4\x3a\xbf\x28\x94\xb8\xe6\x91\xc4\x5a\xda\x52\xa6\xf1\x36\x20\x13\x1f\xb9\xa1\xb9\x32\xf9\xbf\x8e\xfd\x13\x7d\x51\x82\x8d\x63\xe7\xaa\xc9\x0d\x4d\x8d\xfe\x65\x3c\x36\x55\xe5\xa7\x71\x60\x23\x36\xcd\xa1\x76\xc0\xd3\xcc\x35\x67\xfe\x8a\x65\x4c\xb1\xfa\x63\xb6\x81\xa5\x31\x06\x9f\xd9\xe6\x7c\xda\x36\xde\xf4\x3c\x35\x74\x32\x7a\xc7\xe9\x74\xd8\xd0\x93\x00\x02\x3f\xe5\xea\xe7\x9f\x42\xcd\xbb\xa0\xd4\x58\x3a\xd4\x9b\x5e\x8d\x6e\x46\x93\x11\xbc\xb9\xbf\xfb\x13\x81\x36\x99\x07\xef\x7f\x1b\xdd\x8f\x9e\x72\x3e\x84\x57\x53\x6d\xf5\x9b\x28\x74\xc8\xdc\x53\x35\x7d\x19\xd6\x65\xad\x25\x96\x15\xf7\x62\x9d\x5f\x24\x09\x8b\x14\x43\x56\x98\xb2\xbc\x7f\x64\x92\x01\x44\x92\x51\xc5\x60\xad\x9f\x66\x45\x9a\xc5\x4c\x42\x22\x24\x14\xcb\x18\x17\x84\x84\x55\xc1\xe4\x06\x4c\x35\xb4\x96\x1f\xc0\x73\x9d\x77\x63\xa3\xdc\xfa\x3b\xdb\x49\xcb\xca\xfa\xf9\x4b\x6b\x5b\x37\xc6\x54\xed\x06\x16\x74\x33\x63\xb0\x4e\xd5\x63\x27\x00\xe3\x4c\xab\xfa\x66\x65\x67\xf9\xb5\xd9\x13\x18\x91\xde\x63\x45\x7b\x91\xe8\x45\xcc\x90\xae\xd8\x39\x6c\xbb\x72\xe8\x3a\xce\x45\x96\x99\x66\x7a\x6e\x5b\x31\x0a\xb5\x07\xb3\x51\xfb\x0d\x31\x9d\x06\xc8\x9b\x94\xc7\x77\x9c\x41\x92\xf2\xb8\xd3\xf2\xec\xd2\x71\x92\x6a\x7c\xfb\x81\x07\xe0\xef\xf5\xc2\xd0\xb4\xc2\x00\x41\xe5\xab\x2c\x04\x2a\xe7\x39\x12\x47\xdb\x20\x5a\x13\x8f\xb8\x05\x6c\x43\xb8\xa7\x6b\x43\xa5\x78\xa6\xe9\x64\xd4\x08\x21\x41\x1b\xc5\x3d\x5d\xb7\x81\xe0\xc1\x94\x74\x8d\x3a\xd0\x02\x65\x2d\x3e\x8d\x0b\xb5\xcc\x00\x61\xe3\x24\x84\xa4\x5c\x31\x99\xd0\x88\x95\xd5\x31\x7c\x14\x71\x75\x37\x94\x95\xeb\xec\xce\x8a\x4e\xd7\xbd\x58\x77\xcf\xcb\x0e\x20\x19\x47\x94\xfb\xad\xee\x6b\x2f\xd3\xd3\xda\x2f\x4f\xb3\xbd\x03\x74\x46\xc3\x46\x27\xc3\x8c\x98\x7f\x0b\xca\x37\x8d\xc4\x19\x8a\xe6\x8a\x2a\x7d\xd3\x6e\xcf\xcc\x56\xb2\xcb\xe8\x7f\xe1\xc8\x87\x8f\xdf\x83\x25\x27\x51\x04\xf9\x51\x7f\x76\xc0\xee\xb3\xe4\x3b\x51\xe4\x08\xbc\x55\xb3\x75\xea\xcc\x1c\xe6\xc2\xa9\x65\x8e\x59\xc2\x24\xac\xc8\x65\x26\x72\xe6\x07\xe6\xa2\x47\x17\x3d\xb1\x20\x1f\xb1\x31\xae\xc8\x2d\x3a\xd5\x31\x1d\x66\xae\xa6\xee\x10\x56\x35\x2b\x9f\x26\x65\x4f\xb8\xfb\xf1\x62\xc0\x3a\xbe\x21\xd0\xe5\x92\xf1\xd8\x97\x2c\x0f\xe1\x8c\x06\x1a\x4b\x9a\xc0\x8a\x8c\xa4\xf4\x83\x23\xa8\x9b\xd7\x43\x93\xde\x97\xa2\xe0\xca\xfe\xaf\xd5\x8a\xc5\x8c\x49\x10\x09\xce\xe6\x39\xa8\x47\xaa\x20\x49\x15\xa8\x47\xd6\x25\xbd\xa1\x83\xd6\xfe\x26\x8e\xb7\x7b\xba\xbd\x8d\x4f\x64\xf5\x17\x2a\x81\x82\x56\xd9\x56\xfc\x89\x76\xe1\x8d\x47\x37\xa3\xcb\x09\x5c\xde\x3d\xdc\x4e\xfc\x1f\x03\x73\xa3\xef\xcd\x92\xde\x8b\x9e\xbe\x72\x46\x83\x5f\x4e\xbe\x77\x77\x5d\x43\x27\xf6\x41\x5f\xa5\xf5\x25\xd5\x7a\x32\x2f\x36\xed\x0d\xdb\x53\x01\x66\x1c\x39\x3c\xfe\x3b\x63\xa6\x34\xf9\x9a\x23\x82\x4f\xe5\x1c\x1a\x52\x3b\xe7\xb4\xdd\x76\xe6\x7a\x67\x4c\xbf\x1c\xbd\xbe\xba\xd5\xb1\xb4\x31\x86\x6b\x5c\x2d\x44\xb2\xf1\x86\xb6\xae\xe7\x8d\x4e\xcd\x5d\xe7\x02\x8b\x0b\xf0\xe1\x63\xa3\x1d\xb8\x8e\x45\xfa\xe1\xa3\x69\x1a\x6e\xb5\xf3\x55\xb3\x93\x6e\xdd\x18\xf2\x99\xa7\xc3\x03\xc3\xf3\x7a\x7b\x63\x4e\xb0\x22\x2c\xe7\xda\xdc\xfd\xcd\x7b\xbf\x37\xf3\x83\x01\xf4\xe5\x1d\x72\xa6\x30\xef\x4d\x99\x89\xcb\x2f\xb6\xae\x83\x5e\xd5\x03\x25\xeb\xf0\xa2\x74\x9d\xa2\x0e\x63\xdb\x02\x6a\x49\x68\x5e\x33\x5b\x03\x34\xce\x9e\xe0\x05\xa8\xa6\x73\xdc\x50\xc2\x67\x4d\xf1\xdd\xdd\x50\xb8\x15\x38\x6e\x83\x14\x88\x93\x7e\x61\x10\x0b\xa0\xf5\x38\x58\x1f\xf7\x3e\x60\xff\x82\x42\x88\x09\x0f\x71\xdd\x4b\x74\xa5\xcd\xb1\xc6\x80\x3b\x94\x48\x13\x28\x88\xd9\xda\x38\x85\xa6\x5e\x46\x61\x58\x6f\xd8\xf5\x08\xa3\x97\x31\xbe\x4d\x55\x00\xbf\x0e\xe1\xe5\xfe\x09\x16\x32\x27\xb7\x6c\xed\x7b\x5c\x28\x5d\x4c\x8b\xd9\x4c\x87\x5e\x60\x7a\x27\x06\x37\x03\xfd\x5b\x0a\x79\x5d\x24\x09\x32\x78\x46\xde\xcb\x54\xb1\xb1\x8e\xdf\xf7\x1e\xde\x5d\x5d\x4c\x46\x3a\xf3\xed\x15\x3d\x7b\xee\x49\x3d\x18\x8f\x26\x3d\xbb\xed\x2f\x32\xe4\x77\x91\xf2\x66\x9d\x43\x2f\xd8\xdb\xab\x41\x3f\x5d\x69\x7b\x31\x9e\xf0\x1a\x32\x23\xd6\x6a\x10\x82\x31\x70\xe4\x4e\xfd\x86\x37\x0f\xf7\x9f\x00\x00\x00\xff\xff\x44\xc9\xbd\xca\xaf\x12\x00\x00")

func templatesDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultTmpl,
		"templates/default.tmpl",
	)
}

func templatesDefaultTmpl() (*asset, error) {
	bytes, err := templatesDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.tmpl", size: 4783, mode: os.FileMode(436), modTime: time.Unix(1609827329, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.tmpl": templatesDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templatesDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

