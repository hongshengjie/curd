
package model

import (
	"context"
	"go-common/library/database/sql"
	"time"
)
{{ $table := .}}

// {{.GoName}} represents a row from '{{.Name}}'.
type {{.GoName}} struct {
	{{- range .Fields }}
    	{{ .GoName }} {{  .GoType }} `json:"{{ .ColumnName }}"` // {{ .ColumnName }}
    {{- end }}
}

// Insert  Insert
func (a *{{.GoName}}) Insert(ctx context.Context, db *sql.DB) error {
	var err error

	const sqlstr = `INSERT INTO  {{ .Name}} (` +
		` {{field . false}}` +
		`) VALUES (` +
		` {{value . false}}` +
		`)`

	result, err := db.Exec(ctx, sqlstr, {{govalue . false}})
	if err != nil {
		return err
	}

	a.{{.PrimaryKey.GoName}}, err = result.LastInsertId()
	if err != nil {
		return err
	}
	return nil
}

// Update Updates 
func  (a *{{.GoName}})Update(ctx context.Context,db *sql.DB) error {
	var err error

	const sqlstr = `UPDATE {{.Name}} SET ` +
		` {{ updateset . false}}` +
		` WHERE {{.PrimaryKey.ColumnName}} = ?`

	_, err = db.Exec(ctx, sqlstr,{{updategovalue . false}})
	return err
}

// {{.GoName}}By{{.PrimaryKey.GoName}}  {{.GoName}}By{{.PrimaryKey.GoName}}
func {{.GoName}}By{{.PrimaryKey.GoName}}(ctx context.Context, db *sql.DB, {{.PrimaryKey.ColumnName}} {{.PrimaryKey.GoType}})(*{{.GoName}},error){
	var err error

	const sqlstr = `SELECT ` +
		`{{field . true}} ` +
		`FROM  {{.Name}} ` +
		`WHERE {{.PrimaryKey.ColumnName}} = ?`

	a := {{.GoName}}{}

	err = db.QueryRow(ctx, sqlstr, {{.PrimaryKey.ColumnName}}).Scan({{govalue . true}})
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// {{.GoName}}Delete {{.GoName}}Delete
func {{.GoName}}Delete(ctx context.Context, db *sql.DB, {{.PrimaryKey.ColumnName}} {{.PrimaryKey.GoType}})error{
	var err error

    const sqlstr = `DELETE FROM  {{.Name}} WHERE {{.PrimaryKey.ColumnName}} = ?`

    _, err = db.Exec(ctx, sqlstr,  {{.PrimaryKey.ColumnName}})
    if err != nil {
    	return err
    }
    return nil
}



{{range $i ,$index := .Indexes}}

// {{$table.GoName}}By{{$index.IndexGoName}}  {{$table.GoName}}By{{$index.IndexGoName}}
func {{$table.GoName}}By{{$index.IndexGoName}}(ctx context.Context, db *sql.DB,{{ goparamlist $index true  }} )({{ if not $index.IsUnique }}[]{{ end }}*{{ $table.GoName }}, error){
{{ if $index.IsUnique }}

    const sqlstr = `SELECT ` +
        `{{field $table true}} ` +
        `FROM  {{$table.Name}} ` +
        `WHERE {{query $index }}`

        a := {{$table.GoName}}{}

        err := db.QueryRow(ctx, sqlstr, {{goparamlist $index false}}).Scan({{govalue $table true}})
        if err != nil {
            return nil, err
        }

        return &a, nil
}

{{ else }}
        const sqlstr = `SELECT ` +
            `{{field $table true}} ` +
            `FROM  {{$table.Name}} ` +
            `WHERE {{query $index }}`
        q, err := db.Query(ctx,sqlstr, {{ goparamlist $index false }})
        if err != nil {
            return nil, err
        }
        defer q.Close()

        res := []*{{ $table.GoName}}{}
        for q.Next() {
            a := {{ $table.GoName }}{}

            err = q.Scan({{ govalue $table true}})
            if err != nil {
                return nil, err
            }
            res = append(res, &a)
        }

        return res, nil
}
{{end}}

{{end}}

