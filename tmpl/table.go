package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _table_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6f\xdb\x36\x10\x7f\x16\x3f\xc5\xcd\x08\x5a\x29\x53\x95\xf7\x00\xc6\xd0\x26\xea\x66\x2c\x4b\xbb\xc4\xd9\x1e\x8a\x62\x66\xac\xb3\xa1\x4d\x22\x6d\x92\x6a\x6d\x10\xfc\xee\x03\x45\x4a\x96\x25\xd7\x11\x36\x54\x2f\x92\xa8\x23\x79\xf7\xfb\xc3\x13\xd9\xd0\xe5\x3f\x74\x8d\x50\xf2\x0c\x0b\x42\xf2\x72\xc3\x85\x82\x90\x04\x93\x25\x67\x0a\x77\x6a\x42\x82\xc9\x9a\xbf\x59\xf2\xb2\xe4\xec\xaa\xc8\x9f\x05\x15\xfb\xab\x8c\x2a\xfa\x4c\x25\x5e\xc9\x6d\x61\x23\x54\x5e\xe2\x84\x44\x44\x6b\xb8\x50\xf4\xb9\x40\xb8\x9e\x42\x62\x0c\x21\x57\x57\xa0\x75\xf2\x33\xbf\xa7\x25\x1a\x03\x02\x37\x02\x25\x32\x25\x81\x82\xe0\x5f\x61\x25\x78\x09\xaf\xb5\x4e\x5c\xc0\xeb\x84\xa8\xfd\x06\x8f\xe6\x48\x25\xaa\xa5\x02\x4d\x02\xad\xdf\x80\xa0\x6c\x8d\x90\xbc\xcf\xb1\xc8\x24\x18\x43\x00\x00\x02\xad\xc1\x4f\x00\x63\x40\x6b\xb0\xaf\x73\xbb\x92\x31\xb0\xf8\x5b\x72\x76\x3d\xb1\x31\x37\xbc\xa8\x4a\xe6\xe3\x26\x0b\xa8\xd3\xeb\x0d\xd7\x2b\xda\xad\x90\x65\xf6\xd5\x55\x31\x63\x12\x85\x02\x7f\x27\xab\x8a\x2d\x21\xa4\x70\xd9\xc9\x34\xf2\x1f\xc3\xa5\xda\x81\xc7\x2f\xb9\x71\xf7\x18\xb2\x67\xb8\x94\xdb\x22\xb9\x7d\x17\x01\x0a\xc1\x85\xad\xe8\x0b\x15\xf6\xc5\x0d\x10\x12\x2c\x39\x93\x0a\xe4\xb6\x90\x4a\xc0\x14\x16\xb3\xfb\xc7\xf4\x61\x0e\xb3\xfb\xf9\x07\xa8\x33\xf5\x98\x84\x0b\xf8\x91\x04\xc1\x02\xb4\x5e\x59\x24\x20\x81\x15\x2d\x24\x1a\xe3\x3f\x44\xf0\xc7\xdb\xbb\xa7\xf4\xb1\x1b\xf9\x85\x16\x15\x0e\x23\x17\x84\x04\x02\x65\x55\xa8\xb8\xce\xe5\x7a\x0a\xd9\x73\x92\xee\x70\x69\x0b\x89\x7d\x36\x31\x68\xbd\xe6\xbd\x25\x22\x12\xe4\xab\x7a\xd2\x0f\x53\x60\x79\x61\x4b\x0a\x04\xaa\x4a\x30\x3b\x4a\x02\x43\x48\x40\x13\xad\x93\x8f\x22\x2f\xa9\xd8\xff\x8a\xfb\x16\x2e\xb7\xdb\x14\xdc\xde\xc9\x1d\x95\xca\xe1\x37\xcb\xc2\x11\x0b\x37\xaf\x2c\x2f\x3c\x45\x4f\x9b\x8c\x2a\xf4\x37\x09\x8e\xa3\x01\x49\xee\xf3\x49\x8e\xfe\x13\x45\x4f\x1f\x6f\xdf\xce\x53\x68\x25\x0c\x8f\xe9\x1c\x0e\xa0\x43\xe5\xd2\x41\x35\x40\x1e\xfe\xfc\x25\x7d\xa8\x67\x76\xd0\x39\x48\xd1\x18\x98\xc2\x4f\x96\x9d\xbf\x1a\xa8\x4e\xf1\xa2\xb5\xdb\xe1\x14\x39\x1d\xc4\x06\x5e\x7c\xb7\x3f\x4d\x0b\x8c\x09\x72\xd8\x8e\x08\x7c\xc9\x0b\xf1\xb9\xf2\xfb\x4b\x5a\x43\x1b\x13\x85\x5d\x3e\xe3\x9a\x97\x68\x04\x51\x8f\xe9\x5d\x7a\xd3\x52\x73\x30\x8e\x12\x95\xdd\xcc\x8f\xbf\x7f\xf8\xf0\x1b\x74\xd8\xf4\xc3\x63\xa9\xa2\xd6\x3e\x9d\xf4\xb4\x75\x40\x4b\xde\xef\x15\x8a\xfd\x03\xff\xda\x37\xd6\xb7\x56\x8d\x92\xc7\x25\x65\x61\xd7\x79\x2e\xdb\x73\xfe\x60\x79\x11\x1f\xdc\xe7\x07\x5f\xd1\xb8\xe3\x94\x4e\x82\xb7\x58\xa0\xc2\xe1\xc8\x80\x61\x37\xfc\x3d\xf8\xac\x09\x1b\x12\x68\x8f\xe1\x3e\x87\xb7\xe9\x5d\x3a\x4f\xa1\x4f\xd2\x48\x76\xec\x8a\x67\xbd\x04\xe7\xb8\xa8\xa7\xf7\x51\xaf\xbb\x4f\xc7\x66\xf6\xdd\x75\x90\xe3\xe3\x89\x10\xad\x5d\xeb\xba\xc8\x21\xbe\xc8\x59\x86\xbb\xba\x49\xce\xec\x13\xca\xb6\x57\xba\xfe\x79\xe4\x2b\x17\xed\x22\xbb\x2e\x1d\x19\xda\x30\x39\x32\xfc\x45\x86\xb5\x86\x35\xdf\x50\x41\xcb\x22\x97\x0a\x7c\x2d\x56\x97\x60\xbb\x6d\x14\x6a\x6d\x61\x62\xbc\xf9\x96\xcc\xe4\x13\xcb\xb7\x95\x6d\xae\x9f\x3e\x6b\xed\x1b\xeb\x65\xfb\xb7\x70\x68\xdd\x31\x34\x76\x76\x8b\x0c\x17\x38\xad\x8b\x8e\xb7\xc1\x5f\xad\xc3\xfd\x1f\x49\xc7\xe6\x6d\x48\xa3\x23\x9f\x46\xc7\xf2\x6d\x48\x23\xad\xad\xb5\x6e\x53\xac\x31\x5e\x4d\xf6\xf2\x96\xef\xc1\xab\xcd\x21\xe2\xd0\x55\xbf\x75\x00\x9c\x00\xb4\x39\xc5\xfb\x47\xc0\x51\x39\x51\xbb\xc7\x29\x61\x36\x57\xff\x60\x68\xc6\x3b\x29\x0e\x8f\x09\xcb\x53\x21\xdb\x1f\xa2\x91\xa8\x8f\x44\x7e\x24\xfa\xe7\x19\x68\x22\xb6\x71\x1f\xe1\x1a\xde\x03\xba\xa7\xf4\x5a\xc3\x0b\xff\x1f\xc1\xe6\x29\xc3\x15\x0a\xd8\x26\x37\x05\x97\x18\x46\x5d\x64\xa5\x4d\xed\xd3\xe7\x81\xde\x6b\x91\x34\x61\x2b\x6e\x67\xdf\xe3\x4e\x85\x51\x6f\x73\x2f\xb0\x81\x59\xba\x12\x6b\x64\x36\x85\x6d\x23\x18\x78\x41\x31\x2f\xd5\x7c\xae\xee\xe3\xda\x9b\x32\xa7\x40\x37\x1b\x64\x59\x28\x50\xc6\xf0\x8a\x46\x67\x94\x56\x87\x38\xa9\x69\x8d\x2c\x33\xb5\xe4\xfc\xc3\xbf\x01\x00\x00\xff\xff\xd9\x21\x63\x05\x98\x0c\x00\x00")

func table_tmpl() ([]byte, error) {
	return bindata_read(
		_table_tmpl,
		"table.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"table.tmpl": table_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"table.tmpl": &_bintree_t{table_tmpl, map[string]*_bintree_t{
	}},
}}
