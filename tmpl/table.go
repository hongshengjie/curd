package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _table_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\x5f\x6f\xdb\x36\x10\xc0\x9f\xc5\x4f\x71\x33\x82\x56\xca\x54\xf9\x3d\x80\x31\xa4\x89\xba\x19\xcb\xd2\x2e\x71\xb6\x87\xa2\x98\x19\x89\x4e\xb5\x49\xa4\x4d\x52\xad\x0d\x42\xdf\x7d\xa0\x48\xda\xd4\x9f\x38\x0e\x86\xf9\xc5\xd2\xe9\x78\x3c\xde\xef\xfe\x10\xad\x71\xf6\x0f\x7e\x22\x50\xb1\x9c\x94\x08\x15\xd5\x9a\x71\x09\x21\x0a\x26\x19\xa3\x92\x6c\xe5\x04\x05\x93\x27\xf6\x2e\x63\x55\xc5\xe8\xb4\x2c\x1e\x39\xe6\xbb\x69\x8e\x25\x7e\xc4\x82\x4c\xc5\xa6\xd4\x1a\xb2\xa8\xc8\x04\x45\x48\x29\x38\x93\xf8\xb1\x24\x70\x31\x83\xa4\x69\x10\x9a\x4e\x41\xa9\xe4\x67\x76\x8b\x2b\xd2\x34\xc0\xc9\x9a\x13\x41\xa8\x14\x80\x81\xb3\xef\xb0\xe2\xac\x82\xb7\x4a\x25\x46\xe1\x6d\x82\xe4\x6e\x4d\x3a\x6b\x84\xe4\x75\x26\x41\xa1\x40\xa9\x77\xc0\x31\x7d\x22\x90\x7c\x28\x48\x99\x0b\x68\x1a\x04\x00\x10\x28\x05\x76\x01\x34\x0d\x28\x05\xfa\x75\xa1\x2d\x35\x0d\x2c\xff\x16\x8c\x5e\x4c\xb4\xce\x15\x2b\xeb\x8a\x5a\xbd\xc9\x12\x5a\xf7\x7a\xe2\xd6\xa2\xde\x8a\xd0\x5c\xbf\x9a\x53\xcc\xa9\x20\x5c\x82\xfd\x47\xab\x9a\x66\x10\x62\x38\xf7\x3c\x8d\xec\xc7\x30\x93\x5b\xb0\xf1\x4b\xae\xcc\x7f\x0c\xf9\x23\x9c\x8b\x4d\x99\x5c\xbf\x8f\x80\x70\xce\xb8\x3e\xd1\x37\xcc\xf5\x8b\x11\x20\x14\x64\x8c\x0a\x09\x62\x53\x0a\xc9\x61\x06\xcb\xf9\xed\x7d\x7a\xb7\x80\xf9\xed\xe2\x23\xb4\x9e\xda\x98\x84\x4b\xf8\x11\x05\xc1\x12\x94\x5a\xe9\x48\x40\x02\x2b\x5c\x0a\xd2\x34\xf6\x43\x04\x7f\x5c\xde\x3c\xa4\xf7\xbe\xe6\x37\x5c\xd6\x64\xa8\xb9\x44\x28\x98\x4e\x81\xd7\x14\x36\x35\xe1\x3b\x14\x70\x22\xea\x52\xc6\xad\x67\x17\x33\xc8\x1f\x93\x74\x4b\x32\x7d\xac\xd8\xfa\x16\x83\x52\x4f\xac\x67\x30\x42\x41\xb1\x6a\x17\xfd\x30\x03\x5a\x94\xfa\x80\x01\x27\xb2\xe6\x54\x4b\x51\xd0\x20\x14\xe0\x44\xa9\xe4\x13\x2f\x2a\xcc\x77\xbf\x92\xdd\x3e\x78\x66\xb7\x19\x98\xbd\x93\x1b\x2c\xa4\x89\xe6\x3c\x0f\x4f\x30\xec\x5e\x69\x51\xa2\x61\xda\x3d\xac\x73\x2c\x09\xd4\xed\x9f\x00\xf9\x95\xc0\xe5\xfa\x92\x66\x5f\x19\xbf\x61\xf2\x1a\xcb\xba\x82\x82\xb6\x72\x97\xda\x89\x41\x3c\x60\x6c\x4c\x8d\x22\x3e\x89\xf0\x74\xaa\x43\xe8\x22\xdd\xe7\xfd\xf0\xe9\xfa\x72\x91\xc2\xbe\x1e\xe0\x3e\x5d\xc0\x81\xa0\x3b\x01\x91\x03\x8c\xf0\xe7\x2f\xe9\x5d\xbb\xd2\x0b\xee\x21\xaf\x9b\x06\x66\xf0\x93\x46\xfd\x97\x8b\xf4\x18\x56\xa5\xcc\x0e\x63\x6c\xbd\x80\x0f\x22\xfc\x7e\x37\x4e\x15\x4e\x51\x32\x91\x3e\x41\xf1\xa5\xc2\x8a\x8f\x1d\xbf\x6f\x52\x77\x87\xa6\x89\x42\x9f\x6e\xdc\x52\x8a\x5e\x8d\xed\x3e\xbd\x49\xaf\xf6\xa0\x0e\x35\x29\x79\xad\xb7\xb6\xf2\x0f\x77\x1f\x7f\x03\x8f\xad\x15\x9f\x06\xae\x5b\xa2\x28\xc0\xba\x32\x3d\xd7\x95\x2e\xae\x3d\xd8\xdf\xb5\xd6\x1d\xfb\xde\xaf\xd9\xe7\xf6\x88\x92\xfb\x0c\xd3\xd0\x2f\x6a\xe3\xfb\xb1\xd2\xa3\x45\x19\x1f\x0a\xdb\x0a\xdf\xe0\x78\xbc\x08\xaf\x49\x49\x24\x19\x4a\x06\xf4\x8d\xf8\xff\x60\xdd\xc2\x1c\xc2\xd5\xfd\xbe\xc3\x57\x0b\xfa\x88\xaf\xd3\x9b\x74\x91\x42\x9f\xe1\x89\x55\xa7\x2d\x1e\x2d\x3c\x38\x06\xa7\x5d\xde\xc7\xd0\xce\x3d\xaf\x26\xf5\xbb\x99\x5d\xdd\x56\x88\x90\x52\x66\x68\x9e\x15\x10\x9f\x15\x34\x27\xdb\x76\x3c\xcf\xf5\x13\x11\x7a\x4a\xdb\x08\x28\x65\xa6\x77\xa7\x10\xcd\x0a\xa3\xed\x97\xf5\x89\xaa\xad\x6d\x8b\xf8\xc4\x25\x2f\xa2\x57\x0a\x9e\xd8\x1a\x73\x5c\x95\x85\x90\x60\xcf\xa4\x13\x16\xf4\xbc\x8f\x42\xa5\x74\xb8\x28\x73\xdf\x92\xb9\x78\xa0\xc5\xa6\xd6\xe3\xfd\xf3\x17\xa5\xec\x68\x3f\xdf\xdf\x57\x0e\x97\x87\x18\x5c\x0f\x30\xd7\x00\x6d\x68\x68\xc4\x84\x6c\x34\x71\xc6\x92\xc7\xeb\x0f\xe0\xfd\xf6\x9d\xc2\x5e\x9a\xbc\x76\xd1\x51\x73\x49\x67\x7d\xf5\xda\x47\x47\xcd\xe5\x62\xeb\x8b\x8b\x4a\xd3\x2c\x0f\xce\xda\xa6\xd1\xe3\xa0\xbc\xe3\x1c\x46\xfe\x73\x2d\x64\x24\xf2\x6e\x46\xf4\x9b\x48\xe7\x58\xd1\x7e\x8f\xb1\x4c\x76\xbf\x7e\x6b\x71\x72\xcf\xc5\x5e\xa3\xf1\xbe\x6a\xb0\xa5\xd8\xdf\xe1\x9e\xc5\xf3\x0a\x44\xaf\xc0\xf4\x0a\x54\xc7\x71\x39\x8d\x4d\xdc\xc7\xd1\xb2\x38\xa0\x18\xab\x82\x96\x05\xfc\xf7\x70\xbb\xa7\x9c\xac\x08\x87\x4d\x72\x55\x32\x41\xc2\xa8\x93\xf8\x25\xc3\xb9\xbd\xb0\x09\x0f\x8f\xd0\x2e\x7f\xfe\x32\xa8\xae\x36\xd3\x9c\xda\x8a\x69\xab\xb7\x64\x2b\xc3\xa8\xe7\x94\xcd\xd2\x41\x69\xfa\x79\xea\xd8\x66\x98\x76\x64\xa6\xc3\x6e\x5c\x26\xc2\x0b\xa9\xf8\x52\x7c\x8e\xc5\x08\xba\x69\xe9\xce\x3e\x03\xbc\x5e\x13\x9a\x87\x9c\x88\x18\xde\xe0\xe8\x48\x0e\xb7\x2a\x2e\x89\xc1\x4f\x64\x42\xf3\xc6\x36\x6f\xfb\xf8\x6f\x00\x00\x00\xff\xff\xee\xd5\x03\x39\xac\x0d\x00\x00")

func table_tmpl() ([]byte, error) {
	return bindata_read(
		_table_tmpl,
		"table.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"table.tmpl": table_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"table.tmpl": &_bintree_t{table_tmpl, map[string]*_bintree_t{
	}},
}}
