package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _table_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x51\x6f\xdb\x36\x10\x7e\x16\x7f\xc5\xcd\x08\x5a\x29\x53\x95\xf7\x00\xc6\xd0\x26\xea\x66\x2c\x4b\xbb\xd8\xd9\x1e\x8a\x62\xa6\xa5\x73\xa0\x55\x22\x6d\x92\x6a\x6d\x10\xfc\xef\x03\x45\x4a\x96\x65\xc7\x31\x56\xd4\x2f\x12\xe9\xe3\xf1\xee\xfb\xee\xbb\x13\x59\xd1\xec\x0b\x7d\x42\xa8\x78\x8e\x25\x21\x45\xb5\xe2\x42\x41\x48\x82\x51\xc6\x99\xc2\x8d\x1a\x91\x60\xf4\xc4\xdf\x64\xbc\xaa\x38\xbb\x2a\x8b\x85\xa0\x62\x7b\x95\x53\x45\x17\x54\xe2\x95\x5c\x97\xd6\x42\x15\x15\x8e\x48\x44\xb4\x86\x0b\x45\x17\x25\xc2\xf5\x18\x12\x63\x08\xb9\xba\x02\xad\x93\x5f\xf9\x3d\xad\xd0\x18\x10\xb8\x12\x28\x91\x29\x09\x14\x04\xff\x06\x4b\xc1\x2b\x78\xad\x75\xe2\x0c\x5e\x27\x44\x6d\x57\xb8\x77\x46\x2a\x51\x67\x0a\x34\x09\xb4\x7e\x03\x82\xb2\x27\x84\xe4\x7d\x81\x65\x2e\xc1\x18\x02\x00\x10\x68\x0d\xfe\x00\x18\x03\x5a\x83\x5d\xce\xac\x27\x63\x60\xfe\xaf\xe4\xec\x7a\x64\x6d\x6e\x78\x59\x57\xcc\xdb\x8d\xe6\xd0\x84\x37\xd8\x6e\x3c\xda\xab\x90\xe5\x76\xe9\xb2\x98\x30\x89\x42\x41\xfb\xa4\x20\x30\xe3\x22\x27\xcb\x9a\x65\x10\x52\xb8\xec\x85\x1c\x79\xab\x30\x53\x1b\xf0\x40\x26\x37\xee\x19\x43\xbe\x80\x4b\xb9\x2e\x93\xdb\x77\x11\xa0\x10\x5c\xd8\xd4\xbe\x52\x61\x17\x6e\x83\x90\x20\xe3\x4c\x2a\x90\xeb\x52\x2a\x01\x63\x98\x4f\xee\xa7\xe9\xc3\x0c\x26\xf7\xb3\x0f\xd0\x84\xec\xc1\x09\xe7\xf0\x33\x09\x82\x39\x68\xbd\xb4\x90\x40\x02\x4b\x5a\x4a\x34\xc6\xff\x11\xc1\x5f\x6f\xef\x1e\xd3\x69\xdf\xf2\x2b\x2d\x6b\x3c\xb4\x9c\x13\x12\x08\x94\x75\xa9\xe2\x26\x96\xeb\x31\xe4\x8b\x24\xdd\x60\x66\x13\x89\x7d\x34\x31\x68\xfd\xc4\x07\x2e\x22\x12\x14\xcb\xe6\xd0\x4f\x63\x60\x45\x69\x53\x0a\x04\xaa\x5a\x30\xbb\x4b\x02\x43\x48\x40\x13\xad\x93\x8f\xa2\xa8\xa8\xd8\xfe\x8e\xdb\x0e\x2e\x77\xdb\x18\xdc\xdd\xc9\x1d\x95\xca\xe1\x37\xc9\xc3\x33\x1c\xb7\x4b\x56\x94\x9e\xab\xc7\x55\x4e\x15\xb6\x8f\x7d\xaa\x0e\xb8\x72\x56\x47\xa9\xfa\x5f\x4c\x3d\x7e\xbc\x7d\x3b\x4b\xa1\x2b\x69\x98\xa6\x33\xd8\x61\x0f\x75\x73\x9f\x44\x75\x40\x00\xfc\xfd\x5b\xfa\xd0\x9c\xec\x81\xb4\x2b\x4d\x63\x60\x0c\xbf\x58\x92\xfe\x69\x11\x3b\x46\x8f\xd6\xee\x86\x63\x1c\xf5\x80\x3b\xd0\xe6\xbb\xed\x71\x76\x00\x60\x8a\x25\x66\xbb\x9a\x87\xc5\x16\x56\xce\x10\xbe\xe0\xf6\x7a\xfe\x7c\xc4\x73\x07\xfa\x19\xd7\xbc\xa4\x95\xf8\x14\x2e\x43\x97\x56\xf9\xc6\x44\x61\x9f\xe8\xb8\x21\x2c\x3a\x83\xc1\x69\x7a\x97\xde\x74\x9c\xed\x84\xa5\x44\x6d\x2f\xf3\xfb\xef\x1f\x3e\xfc\x01\x3d\x9a\xfd\xf6\xb9\x1c\x52\x2b\xaf\x5e\x78\xda\x2a\xa4\x63\xf5\xcf\x1a\xc5\xf6\x81\x7f\x1b\x0a\xef\x39\xaf\x51\x32\xcd\x28\x0b\xfb\xca\x74\xd1\x9e\xd2\x0f\x2b\xca\x78\xa7\x4e\xbf\xf9\x8a\xc6\x3d\x25\xf5\x02\xbc\xc5\x12\x15\x82\x7f\x7c\x4f\x09\x38\x17\x3f\x82\xf0\x86\xd1\x43\x86\x6d\x43\x1f\x92\x7c\x9b\xde\xa5\xb3\x14\x86\x2c\x9e\x49\x9f\xf5\x78\x52\x85\x70\x8a\xac\xe6\xf8\x90\x96\x66\x8e\xf5\x04\x6a\xd7\x6e\x16\xed\xf7\x37\x42\xb4\x76\x43\xf0\xa2\x80\xf8\xa2\x60\x39\x6e\x9a\x71\x3b\xb1\x6f\x28\xbb\xa9\xeb\x26\xf1\x9e\xf0\x9c\xb5\xb3\xec\xf4\xed\xd5\xbd\xd8\x82\xf3\xc5\x68\x85\x96\xd0\xbe\xf1\x80\xca\x33\x5d\xbf\x48\xb1\xd6\xf0\xc4\x57\x54\xd0\xaa\x2c\xa4\x02\x9f\x8c\xad\x5c\xb0\x83\x3b\x0a\xb5\xb6\x38\x31\xde\xfe\x97\x4c\xe4\x23\x2b\xd6\xb5\x9d\xd3\x9f\x3e\x6b\xed\x67\xf4\x65\xf7\xe1\xb1\xfb\x0a\x88\xa1\x15\xbc\x73\x72\xe8\xe0\x78\x61\xf4\xd4\x0f\xfe\xd7\xf5\x00\xff\x71\xd3\x6b\x04\x9d\x49\x5b\x48\x3e\x8c\x5e\x53\xe8\x4c\xda\xda\x5a\x5b\x71\xb7\xc9\x5a\x54\x3b\x13\xdf\x14\x06\xf0\x6a\xb3\xb3\xd8\xcd\xe5\xe7\x5a\xc4\x11\x40\xdb\x01\x30\x6c\x12\x7b\xe9\x44\xdd\x1d\xc7\x2a\xb3\xfd\x0d\x5b\x47\xbb\xdf\x0b\xf1\xb0\x91\x58\x9e\x4a\xd9\x7d\x5b\x9d\x89\xfa\x99\xc8\x9f\x89\xfe\x69\x06\x5a\x8b\x75\x3c\x44\xb8\x81\x77\x87\xee\xb1\x7a\x6d\xe0\x85\xef\x47\xb0\x7d\xcb\x71\x89\x02\xd6\xc9\x4d\xc9\x25\x86\x51\x1f\x59\x69\x43\xfb\xf4\xf9\xa0\xde\x9b\x22\x69\xcd\x96\xdc\x9e\xbe\xc7\x8d\x0a\xa3\xc1\xe5\xbe\xc0\x0e\xc4\xd2\x2f\xb1\xb6\xcc\xc6\xb0\x6e\x0b\x06\x5e\xa8\x98\x97\x72\x3e\x95\xf7\x7e\xee\x6d\x9a\x63\xa0\xab\x15\xb2\x3c\x14\x28\x63\x78\x45\xa3\x13\x95\xd6\x98\xb8\x52\xd3\x1a\x59\x6e\x9a\x92\xf3\x2f\xff\x05\x00\x00\xff\xff\x36\xbd\x98\xe2\xe3\x0c\x00\x00")

func table_tmpl() ([]byte, error) {
	return bindata_read(
		_table_tmpl,
		"table.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"table.tmpl": table_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"table.tmpl": &_bintree_t{table_tmpl, map[string]*_bintree_t{
	}},
}}
